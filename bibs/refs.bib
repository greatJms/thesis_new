

@article{JeOh22,
author = {Jeon, Minseok and Oh, Hakjoo},
title = {Return of CFA: Call-Site Sensitivity Can Be Superior to Object Sensitivity Even for Object-Oriented Programs},
year = {2022},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {POPL},
url = {https://doi.org/10.1145/3498720},
doi = {10.1145/3498720},
abstract = {In this paper, we challenge the commonly-accepted wisdom in static analysis that object sensitivity is superior to call-site sensitivity for object-oriented programs. In static analysis of object-oriented programs, object sensitivity has been established as the dominant flavor of context sensitivity thanks to its outstanding precision. On the other hand, call-site sensitivity has been regarded as unsuitable and its use in practice has been constantly discouraged for object-oriented programs. In this paper, however, we claim that call-site sensitivity is generally a superior context abstraction because it is practically possible to transform object sensitivity into more precise call-site sensitivity. Our key insight is that the previously known superiority of object sensitivity holds only in the traditional k-limited setting, where the analysis is enforced to keep the most recent k context elements. However, it no longer holds in a recently-proposed, more general setting with context tunneling. With context tunneling, where the analysis is free to choose an arbitrary k-length subsequence of context strings, we show that call-site sensitivity can simulate object sensitivity almost completely, but not vice versa. To support the claim, we present a technique, called Obj2CFA, for transforming arbitrary context-tunneled object sensitivity into more precise, context-tunneled call-site-sensitivity. We implemented Obj2CFA in Doop and used it to derive a new call-site-sensitive analysis from a state-of-the-art object-sensitive pointer analysis. Experimental results confirm that the resulting call-site sensitivity outperforms object sensitivity in precision and scalability for real-world Java programs. Remarkably, our results show that even 1-call-site sensitivity can be more precise than the conventional 3-object-sensitive analysis.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {58},
numpages = {29},
keywords = {Context sensitivity, Machine learning for program analysis, Pointer analysis}
}


@article{Tan2021,
author = {Tan, Tian and Li, Yue and Ma, Xiaoxing and Xu, Chang and Smaragdakis, Yannis},
title = {Making Pointer Analysis More Precise by Unleashing the Power of Selective Context Sensitivity},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {OOPSLA},
url = {https://doi.org/10.1145/3485524},
doi = {10.1145/3485524},
abstract = {Traditional context-sensitive pointer analysis is hard to scale for large and complex Java programs. To address this issue, a series of selective context-sensitivity approaches have been proposed and exhibit promising results. In this work, we move one step further towards producing highly-precise pointer analyses for hard-to-analyze Java programs by presenting the Unity-Relay framework, which takes selective context sensitivity to the next level. Briefly, Unity-Relay is a one-two punch: given a set of different selective context-sensitivity approaches, say S = S1, . . . , Sn, Unity-Relay first provides a mechanism (called Unity)to combine and maximize the precision of all components of S. When Unity fails to scale, Unity-Relay offers a scheme (called Relay) to pass and accumulate the precision from one approach Si in S to the next, Si+1, leading to an analysis that is more precise than all approaches in S. As a proof-of-concept, we instantiate Unity-Relay into a tool called Baton and extensively evaluate it on a set of hard-to-analyze Java programs, using general precision metrics and popular clients. Compared with the state of the art, Baton achieves the best precision for all metrics and clients for all evaluated programs. The difference in precision is often dramatic — up to 71% of alias pairs reported by previously-best algorithms are found to be spurious and eliminated.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {147},
numpages = {27},
keywords = {Alias Analysis, Context Sensitivity, Pointer Analysis, Java}
}


@InProceedings{Singh2018cav,
author="Singh, Gagandeep
and P{\"u}schel, Markus
and Vechev, Martin",
editor="Chockler, Hana
and Weissenbacher, Georg",
title="Fast Numerical Program Analysis with Reinforcement Learning",
booktitle="Computer Aided Verification",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="211--229",
abstract="We show how to leverage reinforcement learning (RL) in order to speed up static program analysis. The key insight is to establish a correspondence between concepts in RL and those in analysis: a state in RL maps to an abstract program state in analysis, an action maps to an abstract transformer, and at every state, we have a set of sound transformers (actions) that represent different trade-offs between precision and performance. At each iteration, the agent (analysis) uses a policy learned offline by RL to decide on the transformer which minimizes loss of precision at fixpoint while improving analysis performance. Our approach leverages the idea of online decomposition (applicable to popular numerical abstract domains) to define a space of new approximate transformers with varying degrees of precision and performance. Using a suitably designed set of features that capture key properties of abstract program states and available actions, we then apply Q-learning with linear function approximation to compute an optimized context-sensitive policy that chooses transformers during analysis. We implemented our approach for the notoriously expensive Polyhedra domain and evaluated it on a set of Linux device drivers that are expensive to analyze. The results show that our approach can yield massive speedups of up to two orders of magnitude while maintaining precision at fixpoint.",
isbn="978-3-319-96145-3"
}



 @inproceedings{memfix,
 author = {Junhee Lee and Seongjoon Hong and Hakjoo Oh },
 title = {Mem{F}ix: Static Analysis-Based Repair of Memory Deallocation Errors for {C}},
 booktitle = {The 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
 year = {2018}
  } 


@InProceedings{park_et_al:LIPIcs:2015:5245,
  author =	{Changhee Park and Sukyoung Ryu},
  title =	{{Scalable and Precise Static Analysis of JavaScript Applications via Loop-Sensitivity}},
  booktitle =	{29th European Conference on Object-Oriented Programming (ECOOP 2015)},
  pages =	{735--756},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-939897-86-6},
  ISSN =	{1868-8969},
  year =	{2015},
  volume =	{37},
  editor =	{John Tang Boyland},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2015/5245},
  URN =		{urn:nbn:de:0030-drops-52458},
  doi =		{10.4230/LIPIcs.ECOOP.2015.735},
  annote =	{Keywords: JavaScript, static analysis, loops}
}


@article{JeJeChOh17,
 author = {Jeong, Sehun and Jeon, Minseok and Cha, Sungdeok and Oh, Hakjoo},
 title = {Data-Driven Context-Sensitivity for Points-to Analysis},
 journal = {Proceedings of the ACM on Programming Languages},
 volume = {1},
 number = {OOPSLA},
 year = {2017},
  publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{Tan2017,
 author = {Tan, Tian and Li, Yue and Xue, Jingling},
 title = {Efficient and Precise Points-to Analysis: Modeling the Heap by Merging Equivalent Automata},
 booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI 2017},
 year = {2017},
 isbn = {978-1-4503-4988-8},
 location = {Barcelona, Spain},
 pages = {278--291},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/3062341.3062360},
 doi = {10.1145/3062341.3062360},
 acmid = {3062360},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {heap abstraction, points-to analysis},
}


@inproceedings{Thiessen2017,
 author = {Thiessen, Rei and Lhot\'{a}k, Ond\v{r}ej},
 title = {Context Transformations for Pointer Analysis},
 booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI 2017},
 year = {2017},
 isbn = {978-1-4503-4988-8},
 location = {Barcelona, Spain},
 pages = {263--277},
 numpages = {15},
 url = {http://doi.acm.org/10.1145/3062341.3062359},
 doi = {10.1145/3062341.3062359},
 acmid = {3062359},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Pointer analysis, context-sensitive analysis, static analysis},
}


@article{ChOhHeYa17,
 author = {Chae, Kwonsoo and Oh, Hakjoo and Heo, Kihong and Yang, Hongseok},
 title = {Automatically Generating Features for Learning Program Analysis Heuristics},
 journal = {Proceedings of the ACM on Programming Languages},
 volume = {1},
 number = {OOPSLA},
 year = {2017},
  publisher = {ACM},
 address = {New York, NY, USA},
}


@inproceedings{Shivers1988,
 author = {Shivers, O.},
 title = {Control Flow Analysis in Scheme},
 booktitle = {Proceedings of the ACM SIGPLAN 1988 Conference on Programming Language Design and Implementation},
 series = {PLDI '88},
 year = {1988},
 isbn = {0-89791-269-1},
 location = {Atlanta, Georgia, USA},
 pages = {164--174},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/53990.54007},
 doi = {10.1145/53990.54007},
 acmid = {54007},
 publisher = {ACM},
 address = {New York, NY, USA},
}


@inproceedings{hind2001pointer,
	author = {Hind, Michael},
	title = {Pointer Analysis: Haven't We Solved This Problem Yet?},
	booktitle = {Proceedings of the 2001 ACM SIGPLAN-SIGSOFT Workshop on
	Program Analysis for Software Tools and Engineering},
	series = {PASTE '01},
	year = {2001},
	isbn = {1-58113-413-4},
	location = {Snowbird, Utah, USA},
	pages = {54--61},
	numpages = {8},
	url = {http://doi.acm.org/10.1145/379605.379665},
	doi = {10.1145/379605.379665},
	acmid = {379665},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@inproceedings{ruf1995context,
	author = {Ruf, Erik},
	title = {Context-insensitive Alias Analysis Reconsidered},
	booktitle = {Proceedings of the ACM SIGPLAN 1995 Conference on Programming
	Language Design and Implementation},
	series = {PLDI '95},
	year = {1995},
	isbn = {0-89791-697-2},
	location = {La Jolla, California, USA},
	pages = {13--22},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/207110.207112},
	doi = {10.1145/207110.207112},
	acmid = {207112},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@inproceedings{liang1999efficient,
	author = {Liang, Donglin and Harrold, Mary Jean},
	title = {Efficient Points-to Analysis for Whole-program Analysis},
	booktitle = {Proceedings of the 7th European Software Engineering
	Conference Held Jointly with the 7th ACM SIGSOFT International Symposium on
	Foundations of Software Engineering},
	series = {ESEC/FSE-7},
	year = {1999},
	isbn = {3-540-66538-2},
	location = {Toulouse, France},
	pages = {199--215},
	numpages = {17},
	url = {http://dl.acm.org/citation.cfm?id=318773.318943},
	acmid = {318943},
	publisher = {Springer-Verlag},
	address = {London, UK, UK},
	keywords = {aliasing analysis, pointer analysis, points-to graph},
}


@inproceedings{wilson1995efficient,
	author = {Wilson, Robert P. and Lam, Monica S.},
	title = {Efficient Context-sensitive Pointer Analysis for C Programs},
	booktitle = {Proceedings of the ACM SIGPLAN 1995 Conference on Programming
	Language Design and Implementation},
	series = {PLDI '95},
	year = {1995},
	isbn = {0-89791-697-2},
	location = {La Jolla, California, USA},
	pages = {1--12},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/207110.207111},
	doi = {10.1145/207110.207111},
	acmid = {207111},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@inproceedings{Liang2011learning,
	author = {Liang, Percy and Tripp, Omer and Naik, Mayur},
	title = {Learning Minimal Abstractions},
	booktitle = {Proceedings of the 38th Annual ACM SIGPLAN-SIGACT
	Symposium on Principles of Programming Languages},
	series = {POPL '11},
	year = {2011},
	isbn = {978-1-4503-0490-0},
	location = {Austin, Texas, USA},
	pages = {31--42},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/1926385.1926391},
	doi = {10.1145/1926385.1926391},
	acmid = {1926391},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {concurrency, heap abstractions, machine learning,
	randomization, static analysis},
}

@inproceedings{liang2005evaluating,
	author = {Liang, Donglin and Pennings, Maikel and Harrold, Mary Jean},
	title = {Evaluating the Impact of Context-sensitivity on Andersen's
	Algorithm for Java Programs},
	booktitle = {Proceedings of the 6th ACM SIGPLAN-SIGSOFT Workshop on Program
	Analysis for Software Tools and Engineering},
	series = {PASTE '05},
	year = {2005},
	isbn = {1-59593-239-9},
	location = {Lisbon, Portugal},
	pages = {6--12},
	numpages = {7},
	url = {http://doi.acm.org/10.1145/1108792.1108797},
	doi = {10.1145/1108792.1108797},
	acmid = {1108797},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@inproceedings{chatterjee1999relevant,
	author = {Chatterjee, Ramkrishna and Ryder, Barbara G. and Landi, William
	A.},
	title = {Relevant Context Inference},
	booktitle = {Proceedings of the 26th ACM SIGPLAN-SIGACT Symposium on
	Principles of Programming Languages},
	series = {POPL '99},
	year = {1999},
	isbn = {1-58113-095-3},
	location = {San Antonio, Texas, USA},
	pages = {133--146},
	numpages = {14},
	url = {http://doi.acm.org/10.1145/292540.292554},
	doi = {10.1145/292540.292554},
	acmid = {292554},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@inproceedings{grove1997call,
	author = {Grove, David and DeFouw, Greg and Dean, Jeffrey and Chambers,
	Craig},
	title = {Call Graph Construction in Object-oriented Languages},
	booktitle = {Proceedings of the 12th ACM SIGPLAN Conference on
	Object-oriented Programming, Systems, Languages, and Applications},
	series = {OOPSLA '97},
	year = {1997},
	isbn = {0-89791-908-4},
	location = {Atlanta, Georgia, USA},
	pages = {108--124},
	numpages = {17},
	url = {http://doi.acm.org/10.1145/263698.264352},
	doi = {10.1145/263698.264352},
	acmid = {264352},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@Inbook{agesen1994constraint,
	author="Agesen, Ole",
	editor="Le Charlier, Baudouin",
	title="Constraint-based type inference and parametric polymorphism",
	bookTitle="Static Analysis: First International Static Analysis Symposium,
	SAS'94 Namur, Belgium, September 28--30, 1994 Proceedings",
	year="1994",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="78--100",
	isbn="978-3-540-49005-0",
	doi="10.1007/3-540-58485-4_34",
	url="http://dx.doi.org/10.1007/3-540-58485-4_34"
}

@inproceedings{ruf2000effective,
	author = {Ruf, Erik},
	title = {Effective Synchronization Removal for Java},
	booktitle = {Proceedings of the ACM SIGPLAN 2000 Conference on Programming
	Language Design and Implementation},
	series = {PLDI '00},
	year = {2000},
	isbn = {1-58113-199-2},
	location = {Vancouver, British Columbia, Canada},
	pages = {208--218},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/349299.349327},
	doi = {10.1145/349299.349327},
	acmid = {349327},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@Inbook{Heo2016learning,
	author="Heo, Kihong
	and Oh, Hakjoo
	and Yang, Hongseok",
	editor="Rival, Xavier",
	title="Learning a Variable-Clustering Strategy for Octagon from Labeled
	Data Generated by a Static Analysis",
	bookTitle="Static Analysis: 23rd International Symposium, SAS 2016,
	Edinburgh, UK, September 8-10, 2016, Proceedings",
	year="2016",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="237--256",
	isbn="978-3-662-53413-7",
	doi="10.1007/978-3-662-53413-7_12",
	url="http://dx.doi.org/10.1007/978-3-662-53413-7_12"
}

@inproceedings{heo2016unsound,
	title={Machine-Learning-Guided Selectively Unsound Static Analysis},
	author={Heo, Kihong and Oh, Hakjoo and Yi, Kwangkeun},
	booktitle={Proceedings of the 39th International Conference on Software
	Engineering},
	pages={},
	year={2017},
	organization={ACM}
}

@Inbook{cha2016learning,
author="Cha, Sooyoung
and Jeong, Sehun
and Oh, Hakjoo",
editor="Igarashi, Atsushi",
title="Learning a Strategy for Choosing Widening Thresholds from a Large
Codebase",
bookTitle="Programming Languages and Systems: 14th Asian Symposium, APLAS 2016,
Hanoi, Vietnam, November 21 - 23, 2016, Proceedings",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="25--41",
isbn="978-3-319-47958-3",
doi="10.1007/978-3-319-47958-3_2",
url="http://dx.doi.org/10.1007/978-3-319-47958-3_2"
}


@inbook{Sharir1981,
    address = {Englewood Cliffs, NJ},
    author = {Sharir, Micha and Pnueli, Amir},
    title = {{Two approaches to interprocedural data flow analysis}},
    booktitle = {Program Flow Analysis: Theory and Applications},
    chapter = {7},
    citeulike-article-id = {812751},
    editor = {Muchnick, Steven S. and Jones, Neil D.},
    keywords = {context-sensitivity, static-analysis},
    pages = {189--234},
    posted-at = {2009-12-09 20:46:40},
    priority = {2},
    publisher = {Prentice-Hall},
    year = {1981}
}

@inproceedings{soot,
 author = {Vall{\'e}e-Rai, Raja and Co, Phong and Gagnon, Etienne and Hendren, Laurie and Lam, Patrick and Sundaresan, Vijay},
 title = {Soot - a Java Bytecode Optimization Framework},
 booktitle = {Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research},
 series = {CASCON '99},
 year = {1999},
 location = {Mississauga, Ontario, Canada},
 pages = {13--},
 url = {http://dl.acm.org/citation.cfm?id=781995.782008},
 acmid = {782008},
 publisher = {IBM Press},
}


@article{Smaragdakis2015,
 author = {Smaragdakis, Yannis and Balatsouras, George},
 title = {Pointer Analysis},
 journal = {Found. Trends Program. Lang.},
 issue_date = {4 2015},
 volume = {2},
 number = {1},
 month = apr,
 year = {2015},
 issn = {2325-1107},
 pages = {1--69},
 numpages = {69},
 url = {http://dx.doi.org/10.1561/2500000014},
 doi = {10.1561/2500000014},
 acmid = {2802195},
 publisher = {Now Publishers Inc.},
 address = {Hanover, MA, USA},
}

@inproceedings{Smaragdakis2011,
 author = {Smaragdakis, Yannis and Bravenboer, Martin and Lhot\'{a}k, Ondrej},
 title = {Pick Your Contexts Well: Understanding Object-sensitivity},
 booktitle = {Proceedings of the 38th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '11},
 year = {2011},
 isbn = {978-1-4503-0490-0},
 location = {Austin, Texas, USA},
 pages = {17--30},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/1926385.1926390},
 doi = {10.1145/1926385.1926390},
 acmid = {1926390},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {context-sensitivity, object-sensitivity, points-to analysis, type-sensitivity},
}

@inproceedings{Bravenboer2009,
 author = {Bravenboer, Martin and Smaragdakis, Yannis},
 title = {Strictly Declarative Specification of Sophisticated Points-to Analyses},
 booktitle = {Proceedings of the 24th ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications},
 series = {OOPSLA '09},
 year = {2009},
 isbn = {978-1-60558-766-0},
 location = {Orlando, Florida, USA},
 pages = {243--262},
 numpages = {20},
 url = {http://doi.acm.org/10.1145/1640089.1640108},
 doi = {10.1145/1640089.1640108},
 acmid = {1640108},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {DOOP, bdds, datalog, declarative, points-to analysis},
}

@inproceedings{Blackburn2006,
 author = {Blackburn, Stephen M. and Garner, Robin and Hoffmann, Chris and Khang, Asjad M. and McKinley, Kathryn S. and Bentzur, Rotem and Diwan, Amer and Feinberg, Daniel and Frampton, Daniel and Guyer, Samuel Z. and Hirzel, Martin and Hosking, Antony and Jump, Maria and Lee, Han and Moss, J. Eliot B. and Phansalkar, Aashish and Stefanovi\'{c}, Darko and VanDrunen, Thomas and von Dincklage, Daniel and Wiedermann, Ben},
 title = {The DaCapo Benchmarks: Java Benchmarking Development and Analysis},
 booktitle = {Proceedings of the 21st Annual ACM SIGPLAN Conference on Object-oriented Programming Systems, Languages, and Applications},
 series = {OOPSLA '06},
 year = {2006},
 isbn = {1-59593-348-4},
 location = {Portland, Oregon, USA},
 pages = {169--190},
 numpages = {22},
 url = {http://doi.acm.org/10.1145/1167473.1167488},
 doi = {10.1145/1167473.1167488},
 acmid = {1167488},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {DaCapo, Java, SPEC, benchmark, methodology},
}

@inproceedings{Kastrinis2013exception,
 author = {Kastrinis, George and Smaragdakis, Yannis},
 title = {Efficient and Effective Handling of Exceptions in Java Points-to Analysis},
 booktitle = {Proceedings of the 22Nd International Conference on Compiler Construction},
 series = {CC'13},
 year = {2013},
 isbn = {978-3-642-37050-2},
 location = {Rome, Italy},
 pages = {41--60},
 numpages = {20},
 url = {http://dx.doi.org/10.1007/978-3-642-37051-9_3},
 doi = {10.1007/978-3-642-37051-9_3},
 acmid = {2450254},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
}


@inproceedings{Might2010,
 author = {Might, Matthew and Smaragdakis, Yannis and Van Horn, David},
 title = {Resolving and Exploiting the k-CFA Paradox: Illuminating Functional vs. Object-oriented Program Analysis},
 booktitle = {Proceedings of the 31st ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '10},
 year = {2010},
 isbn = {978-1-4503-0019-3},
 location = {Toronto, Ontario, Canada},
 pages = {305--315},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1806596.1806631},
 doi = {10.1145/1806596.1806631},
 acmid = {1806631},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {control-flow analysis, functional, k-cfa, m-cfa, object-oriented, pointer analysis, static analysis},
}

@article{Milanova2005,
 author = {Milanova, Ana and Rountev, Atanas and Ryder, Barbara G.},
 title = {Parameterized Object Sensitivity for Points-to Analysis for Java},
 journal = {ACM Trans. Softw. Eng. Methodol.},
 issue_date = {January 2005},
 volume = {14},
 number = {1},
 month = jan,
 year = {2005},
 issn = {1049-331X},
 pages = {1--41},
 numpages = {41},
 url = {http://doi.acm.org/10.1145/1044834.1044835},
 doi = {10.1145/1044834.1044835},
 acmid = {1044835},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Static analysis, class analysis, context sensitivity, def-use analysis, points-to analysis, side-effect analysis},
}

@inproceedings{Milanova2002,
 author = {Milanova, Ana and Rountev, Atanas and Ryder, Barbara G.},
 title = {Parameterized Object Sensitivity for Points-to and Side-effect Analyses for Java},
 booktitle = {Proceedings of the 2002 ACM SIGSOFT International Symposium on Software Testing and Analysis},
 series = {ISSTA '02},
 year = {2002},
 isbn = {1-58113-562-9},
 location = {Roma, Italy},
 pages = {1--11},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/566172.566174},
 doi = {10.1145/566172.566174},
 acmid = {566174},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{Oh2015,
 author = {Oh, Hakjoo and Yang, Hongseok and Yi, Kwangkeun},
 title = {Learning a Strategy for Adapting a Program Analysis via Bayesian Optimisation},
 booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
 series = {OOPSLA 2015},
 year = {2015},
 isbn = {978-1-4503-3689-5},
 location = {Pittsburgh, PA, USA},
 pages = {572--588},
 numpages = {17},
 url = {http://doi.acm.org/10.1145/2814270.2814309},
 doi = {10.1145/2814270.2814309},
 acmid = {2814309},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Bayesian Optimization, rogram Analysis},
}


@article{Oh2014TOPLAS,
 author = {Oh, Hakjoo and Heo, Kihong and Lee, Wonchan and Lee, Woosuk and Park, Daejun and Kang, Jeehoon and Yi, Kwangkeun},
 title = {Global Sparse Analysis Framework},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {September 2014},
 volume = {36},
 number = {3},
 month = sep,
 year = {2014},
 issn = {0164-0925},
 pages = {8:1--8:44},
 articleno = {8},
 numpages = {44},
 url = {http://doi.acm.org/10.1145/2590811},
 doi = {10.1145/2590811},
 acmid = {2590811},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Static analysis, abstract interpretation, sparse analysis},
}

@article{Oh2015b,
 author = {Oh, Hakjoo and Lee, Wonchan and Heo, Kihong and Yang, Hongseok and Yi, Kwangkeun},
 title = {Selective X-Sensitive Analysis Guided by Impact Pre-Analysis},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {January 2016},
 volume = {38},
 number = {2},
 month = dec,
 year = {2015},
 issn = {0164-0925},
 pages = {6:1--6:45},
 articleno = {6},
 numpages = {45},
 url = {http://doi.acm.org/10.1145/2821504},
 doi = {10.1145/2821504},
 acmid = {2821504},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Static analysis, abstract interpretation, context-sensitive analysis},
}


@inproceedings{Smaragdakis2013,
 author = {Smaragdakis, Yannis and Balatsouras, George and Kastrinis, George},
 title = {Set-based Pre-processing for Points-to Analysis},
 booktitle = {Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages \&\#38; Applications},
 series = {OOPSLA '13},
 year = {2013},
 isbn = {978-1-4503-2374-1},
 location = {Indianapolis, Indiana, USA},
 pages = {253--270},
 numpages = {18},
 url = {http://doi.acm.org/10.1145/2509136.2509524},
 doi = {10.1145/2509136.2509524},
 acmid = {2509524},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {off-line, optimization, points-to analysis},
}

@inproceedings{Smaragdakis2014,
 author = {Smaragdakis, Yannis and Kastrinis, George and Balatsouras, George},
 title = {Introspective Analysis: Context-sensitivity, Across the Board},
 booktitle = {Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '14},
 year = {2014},
 isbn = {978-1-4503-2784-8},
 location = {Edinburgh, United Kingdom},
 pages = {485--495},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2594291.2594320},
 doi = {10.1145/2594291.2594320},
 acmid = {2594320},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {context-sensitivity, object-sensitivity, points-to analysis, type-sensitivity},
}

@inproceedings{Tripp2009,
 author = {Tripp, Omer and Pistoia, Marco and Fink, Stephen J. and Sridharan, Manu and Weisman, Omri},
 title = {TAJ: Effective Taint Analysis of Web Applications},
 booktitle = {Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '09},
 year = {2009},
 isbn = {978-1-60558-392-1},
 location = {Dublin, Ireland},
 pages = {87--97},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1542476.1542486},
 doi = {10.1145/1542476.1542486},
 acmid = {1542486},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {java, program analysis, security, slicing, static analysis, taint analysis, web application},
}

@InProceedings{TanLX16,
author="Tan, Tian
and Li, Yue
and Xue, Jingling",
editor="Rival, Xavier",
title="Making k-Object-Sensitive Pointer Analysis More Precise with Still k-Limiting",
booktitle="Static Analysis",
year="2016",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="489--510",
abstract="Object-sensitivity is regarded as arguably the best context abstraction for pointer analysis in object-oriented languages. However, a k-object-sensitive pointer analysis, which uses a sequence of k allocation sites (as k context elements) to represent a calling context of a method call, may end up using some context elements redundantly without inducing a finer partition of the space of (concrete) calling contexts for the method call. In this paper, we introduce Bean, a general approach for improving the precision of any k-object-sensitive analysis, denoted                                                                                   {\$}{\$}k{\$}{\$}                                                                  k                                                            -obj, by still using a k-limiting context abstraction. The novelty is to identify allocation sites that are redundant context elements in                                                                                   {\$}{\$}k{\$}{\$}                                                                  k                                                            -obj from an Object Allocation Graph (OAG), which is built based on a pre-analysis (e.g., a context-insensitive Andersen's analysis) performed initially on a program and then avoid them in the subsequent k-object-sensitive analysis for the program. Bean is generally more precise than                                                                                   {\$}{\$}k{\$}{\$}                                                                  k                                                            -obj, with a precision that is guaranteed to be as good as                                                                                   {\$}{\$}k{\$}{\$}                                                                  k                                                            -obj in the worst case. We have implemented Bean as an open-source tool and applied it to refine two state-of-the-art whole-program pointer analyses in Doop. For two representative clients (may-alias and may-fail-cast) evaluated on a set of nine large Java programs from the DaCapo benchmark suite, Bean has succeeded in making both analyses more precise for all these benchmarks under each client at only small increases in analysis cost.",
isbn="978-3-662-53413-7"
}


@inproceedings{Sridharan2006,
 author = {Sridharan, Manu and Bod\'{\i}k, Rastislav},
 title = {Refinement-based Context-sensitive Points-to Analysis for Java},
 booktitle = {Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '06},
 year = {2006},
 isbn = {1-59593-320-4},
 location = {Ottawa, Ontario, Canada},
 pages = {387--400},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/1133981.1134027},
 doi = {10.1145/1133981.1134027},
 acmid = {1134027},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {context-sensitive analysis, demand-driven analysis, points-to analysis, refinement},
}

@inproceedings{Liang2011,
 author = {Liang, Percy and Naik, Mayur},
 title = {Scaling Abstraction Refinement via Pruning},
 booktitle = {Proceedings of the 32Nd ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '11},
 year = {2011},
 isbn = {978-1-4503-0663-8},
 location = {San Jose, California, USA},
 pages = {590--601},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1993498.1993567},
 doi = {10.1145/1993498.1993567},
 acmid = {1993567},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {abstraction refinement, concurrency, heap abstraction, pruning, slicing, static analysis},
}

@article{Karkare2007,
 author = {Karkare, Bageshri and Khedker, Uday P.},
 title = {An Improved Bound for Call Strings Based Interprocedural Analysis of Bit Vector Frameworks},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {October 2007},
 volume = {29},
 number = {6},
 month = oct,
 year = {2007},
 issn = {0164-0925},
 articleno = {38},
 url = {http://doi.acm.org/10.1145/1286821.1286829},
 doi = {10.1145/1286821.1286829},
 acmid = {1286829},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Bit Vector Data Flow Frameworks, Interprocedural Data Flow Analysis},
}


@inproceedings{Khedker2008,
 author = {Khedker, Uday P. and Karkare, Bageshri},
 title = {Efficiency, Precision, Simplicity, and Generality in Interprocedural Data Flow Analysis: Resurrecting the Classical Call Strings Method},
 booktitle = {Proceedings of the Joint European Conferences on Theory and Practice of Software 17th International Conference on Compiler Construction},
 series = {CC'08/ETAPS'08},
 year = {2008},
 isbn = {3-540-78790-9, 978-3-540-78790-7},
 location = {Budapest, Hungary},
 pages = {213--228},
 numpages = {16},
 url = {http://dl.acm.org/citation.cfm?id=1788374.1788394},
 acmid = {1788394},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
}

@InProceedings{Guyer2003,
author="Guyer, Samuel Z.
and Lin, Calvin",
editor="Cousot, Radhia",
title="Client-Driven Pointer Analysis",
booktitle="Static Analysis",
year="2003",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="214--236",
abstract="This paper presents a new client-driven pointer analysis algorithm that automatically adjusts its precision in response to the needs of client analyses. We evaluate our algorithm on 18 real C programs, using five significant error detection problems as clients. We compare the accuracy and performance of our algorithm against several commonly-used fixed-precision algorithms. We find that the client-driven approach effectively balances cost and precision, often producing results as accurate as fixed-precision algorithms that are many times more costly. Our algorithm works because many client problems only need a small amount of extra precision applied to the right places in each input program.",
isbn="978-3-540-44898-3"
}


@inproceedings{Sridharan2005,
 author = {Sridharan, Manu and Gopan, Denis and Shan, Lexin and Bod\'{\i}k, Rastislav},
 title = {Demand-driven Points-to Analysis for Java},
 booktitle = {Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications},
 series = {OOPSLA '05},
 year = {2005},
 isbn = {1-59593-031-0},
 location = {San Diego, CA, USA},
 pages = {59--76},
 numpages = {18},
 url = {http://doi.acm.org/10.1145/1094811.1094817},
 doi = {10.1145/1094811.1094817},
 acmid = {1094817},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {context-free language reachability, demand-driven analysis, points-to analysis, refinement},
}

@inproceedings{Zhang2014,
 author = {Zhang, Xin and Mangal, Ravi and Grigore, Radu and Naik, Mayur and Yang, Hongseok},
 title = {On Abstraction Refinement for Program Analyses in Datalog},
 booktitle = {Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '14},
 year = {2014},
 isbn = {978-1-4503-2784-8},
 location = {Edinburgh, United Kingdom},
 pages = {239--248},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2594291.2594327},
 doi = {10.1145/2594291.2594327},
 acmid = {2594327},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{Oh2014,
 author = {Oh, Hakjoo and Lee, Wonchan and Heo, Kihong and Yang, Hongseok and Yi, Kwangkeun},
 title = {Selective Context-sensitivity Guided by Impact Pre-analysis},
 booktitle = {Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '14},
 year = {2014},
 isbn = {978-1-4503-2784-8},
 location = {Edinburgh, United Kingdom},
 pages = {475--484},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2594291.2594318},
 doi = {10.1145/2594291.2594318},
 acmid = {2594318},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {context-sensitive analysis, static analysis},
}

@article{Lhotak2008,
 author = {Lhot\'{a}k, Ond\v{r}ej and Hendren, Laurie},
 title = {Evaluating the Benefits of Context-sensitive Points-to Analysis Using a BDD-based Implementation},
 journal = {ACM Trans. Softw. Eng. Methodol.},
 issue_date = {September 2008},
 volume = {18},
 number = {1},
 month = oct,
 year = {2008},
 issn = {1049-331X},
 pages = {3:1--3:53},
 articleno = {3},
 numpages = {53},
 url = {http://doi.acm.org/10.1145/1391984.1391987},
 doi = {10.1145/1391984.1391987},
 acmid = {1391987},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Interprocedural program analysis, Java, binary decision diagrams, call graph construction, cast safety analysis, context sensitivity, points-to analysis},
}

@inproceedings{Lhotak2006,
 author = {Lhot\'{a}k, Ond\v{r}ej and Hendren, Laurie},
 title = {Context-Sensitive Points-to Analysis: Is It Worth It?},
 booktitle = {Proceedings of the 15th International Conference on Compiler Construction},
 series = {CC'06},
 year = {2006},
 isbn = {3-540-33050-X, 978-3-540-33050-9},
 location = {Vienna, Austria},
 pages = {47--64},
 numpages = {18},
 url = {http://dx.doi.org/10.1007/11688839_5},
 doi = {10.1007/11688839_5},
 acmid = {2182110},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
}

@inproceedings{Xu2008,
 author = {Xu, Guoqing and Rountev, Atanas},
 title = {Merging Equivalent Contexts for Scalable Heap-cloning-based Context-sensitive Points-to Analysis},
 booktitle = {Proceedings of the 2008 International Symposium on Software Testing and Analysis},
 series = {ISSTA '08},
 year = {2008},
 isbn = {978-1-60558-050-0},
 location = {Seattle, WA, USA},
 pages = {225--236},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1390630.1390658},
 doi = {10.1145/1390630.1390658},
 acmid = {1390658},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {context sensitivity, pointer analysis, points-to analysis},
}


@inproceedings{Whaley2004,
 author = {Whaley, John and Lam, Monica S.},
 title = {Cloning-based Context-sensitive Pointer Alias Analysis Using Binary Decision Diagrams},
 booktitle = {Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation},
 series = {PLDI '04},
 year = {2004},
 isbn = {1-58113-807-5},
 location = {Washington DC, USA},
 pages = {131--144},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/996841.996859},
 doi = {10.1145/996841.996859},
 acmid = {996859},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Datalog, Java, binary decision diagrams, cloning, context-sensitive, inclusion-based, logic programming, pointer analysis, program analysis, scalable},
}

@inproceedings{Gao2015,
 author = {Gao, Qing and Xiong, Yingfei and Mi, Yaqing and Zhang, Lu and Yang, Weikun and Zhou, Zhaoping and Xie, Bing and Mei, Hong},
 title = {Safe Memory-leak Fixing for C Programs},
 booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 1},
 series = {ICSE '15},
 year = {2015},
 isbn = {978-1-4799-1934-5},
 location = {Florence, Italy},
 pages = {459--470},
 numpages = {12},
 url = {http://dl.acm.org/citation.cfm?id=2818754.2818812},
 acmid = {2818812},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
}

@inproceedings{Yan2017,
 author = {Yan, Hua and Sui, Yulei and Chen, Shiping and Xue, Jingling},
 title = {Machine-Learning-Guided Typestate Analysis for Static Use-After-Free Detection},
 booktitle = {Proceedings of the 33rd Annual Computer Security Applications Conference},
 series = {ACSAC 2017},
 year = {2017},
 isbn = {978-1-4503-5345-8},
 location = {Orlando, FL, USA},
 pages = {42--54},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/3134600.3134620},
 doi = {10.1145/3134600.3134620},
 acmid = {3134620},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {machine learning, static analysis, use-after-free, vulnerability detection},
}


@article{Fink2008,
 author = {Fink, Stephen J. and Yahav, Eran and Dor, Nurit and Ramalingam, G. and Geay, Emmanuel},
 title = {Effective Typestate Verification in the Presence of Aliasing},
 journal = {ACM Trans. Softw. Eng. Methodol.},
 issue_date = {April 2008},
 volume = {17},
 number = {2},
 month = may,
 year = {2008},
 issn = {1049-331X},
 pages = {9:1--9:34},
 articleno = {9},
 numpages = {34},
 url = {http://doi.acm.org/10.1145/1348250.1348255},
 doi = {10.1145/1348250.1348255},
 acmid = {1348255},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Alias analysis, program verification, typestate},
}

@inproceedings{Naik2006,
 author = {Naik, Mayur and Aiken, Alex and Whaley, John},
 title = {Effective Static Race Detection for Java},
 booktitle = {Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '06},
 year = {2006},
 isbn = {1-59593-320-4},
 location = {Ottawa, Ontario, Canada},
 pages = {308--319},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1133981.1134018},
 doi = {10.1145/1133981.1134018},
 acmid = {1134018},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Java, concurrency, multi-threading, static race detection, synchronization},
}

@InProceedings{Das2001,
author="Das, Manuvir
and Liblit, Ben
and F{\"a}hndrich, Manuel
and Rehof, Jakob",
editor="Cousot, Patrick",
title="Estimating the Impact of Scalable Pointer Analysis on Optimization",
booktitle="Static Analysis",
year="2001",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="260--278",
abstract="This paper addresses the following question: Do scalable control-flow-insensitive pointer analyses provide the level of precision required to make them useful in compiler optimizations?",
isbn="978-3-540-47764-8"
}

@inproceedings{DaSilva2006,
 author = {Da Silva, Jeff and Steffan, J. Gregory},
 title = {A Probabilistic Pointer Analysis for Speculative Optimizations},
 booktitle = {Proceedings of the 12th International Conference on Architectural Support for Programming Languages and Operating Systems},
 series = {ASPLOS XII},
 year = {2006},
 isbn = {1-59593-451-0},
 location = {San Jose, California, USA},
 pages = {416--425},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1168857.1168908},
 doi = {10.1145/1168857.1168908},
 acmid = {1168908},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dependence analysis, pointer analysis, speculative optimization},
}



@inproceedings{WeiR15,
  author    = {Shiyi Wei and
               Barbara G. Ryder},
  title     = {Adaptive Context-sensitive Analysis for JavaScript},
  booktitle = {29th European Conference on Object-Oriented Programming, {ECOOP} 2015,
               July 5-10, 2015, Prague, Czech Republic},
  pages     = {712--734},
  year      = {2015},
  url       = {https://doi.org/10.4230/LIPIcs.ECOOP.2015.712},
  doi       = {10.4230/LIPIcs.ECOOP.2015.712},
  timestamp = {Sun, 21 May 2017 00:20:04 +0200},
  biburl    = {http://dblp.org/rec/bib/conf/ecoop/WeiR15},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{Arzt2014,
 author = {Arzt, Steven and Rasthofer, Siegfried and Fritz, Christian and Bodden, Eric and Bartel, Alexandre and Klein, Jacques and Le Traon, Yves and Octeau, Damien and McDaniel, Patrick},
 title = {FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps},
 booktitle = {Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '14},
 year = {2014},
 isbn = {978-1-4503-2784-8},
 location = {Edinburgh, United Kingdom},
 pages = {259--269},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2594291.2594299},
 doi = {10.1145/2594291.2594299},
 acmid = {2594299},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@ARTICLE{Sui2014,
author={Y. Sui and D. Ye and J. Xue},
journal={IEEE Transactions on Software Engineering},
title={Detecting Memory Leaks Statically with Full-Sparse Value-Flow Analysis},
year={2014},
volume={40},
number={2},
pages={107-122},
keywords={C language;program diagnostics;reachability analysis;storage management;Fastcheck;Open64;SPEC2000 C programs;SVFG;Saber static detector;address-taken pointers;context-sensitivity;def-use chains;false positive rate;field-sensitivity;flow-sensitivity;full-sparse value-flow analysis;graph reachability problem;memory leaks detection;memory locations;sparse pointer analysis;sparse value-flow graph;static leak detectors;top-level pointers;value flows;Abstracts;Accuracy;Detectors;Resource management;Scalability;Sensitivity;Standards;Memory Leaks;pointer analysis;sparse value-flow analysis;static analysis},
doi={10.1109/TSE.2014.2302311},
ISSN={0098-5589},
month={Feb},}

@inproceedings{Blackshear2015,
 author = {Blackshear, Sam and Chang, Bor-Yuh Evan and Sridharan, Manu},
 title = {Selective Control-flow Abstraction via Jumping},
 booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
 series = {OOPSLA 2015},
 year = {2015},
 isbn = {978-1-4503-3689-5},
 location = {Pittsburgh, PA, USA},
 pages = {163--182},
 numpages = {20},
 url = {http://doi.acm.org/10.1145/2814270.2814293},
 doi = {10.1145/2814270.2814293},
 acmid = {2814293},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Android static analysis, control-flow abstraction, event-driven systems},
}

@inproceedings{Heintze2001,
 author = {Heintze, Nevin and Tardieu, Olivier},
 title = {Demand-driven Pointer Analysis},
 booktitle = {Proceedings of the ACM SIGPLAN 2001 Conference on Programming Language Design and Implementation},
 series = {PLDI '01},
 year = {2001},
 isbn = {1-58113-414-2},
 location = {Snowbird, Utah, USA},
 pages = {24--34},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/378795.378802},
 doi = {10.1145/378795.378802},
 acmid = {378802},
 publisher = {ACM},
 address = {New York, NY, USA},
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@inproceedings{bodden2008object,
  title={Object representatives: a uniform abstraction for pointer information.},
  author={Bodden, Eric and Lam, Patrick and Hendren, Laurie J},
  booktitle={BCS Int. Acad. Conf.},
  pages={391--405},
  year={2008}
}

@inproceedings{Livshits2003,
 author = {Livshits, V. Benjamin and Lam, Monica S.},
 title = {Tracking Pointers with Path and Context Sensitivity for Bug Detection in C Programs},
 booktitle = {Proceedings of the 9th European Software Engineering Conference Held Jointly with 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {ESEC/FSE-11},
 year = {2003},
 isbn = {1-58113-743-5},
 location = {Helsinki, Finland},
 pages = {317--326},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/940071.940114},
 doi = {10.1145/940071.940114},
 acmid = {940114},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {SSA representation, buffer overruns, context-sensitive analysis, error detection, path-sensitive analysis, pointer analysis, program analysis, program representation, security flaws, software security},
}

@inproceedings{Avots2005,
 author = {Avots, Dzintars and Dalton, Michael and Livshits, V. Benjamin and Lam, Monica S.},
 title = {Improving Software Security with a C Pointer Analysis},
 booktitle = {Proceedings of the 27th International Conference on Software Engineering},
 series = {ICSE '05},
 year = {2005},
 isbn = {1-58113-963-2},
 location = {St. Louis, MO, USA},
 pages = {332--341},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1062455.1062520},
 doi = {10.1145/1062455.1062520},
 acmid = {1062520},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {buffer overflows, context-sensitive, dynamic analysis, error detection, format string violations, pointer analysis, program analysis, programming languages, security aws, software errors, software security, type safety, vulnerabilities},
}

@InProceedings{Khedker2012,
author="Khedker, Uday P.
and Mycroft, Alan
and Rawat, Prashant Singh",
editor="Min{\'e}, Antoine
and Schmidt, David",
title="Liveness-Based Pointer Analysis",
booktitle="Static Analysis",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="265--282",
abstract="Precise flow- and context-sensitive pointer analysis (FCPA) is generally considered prohibitively expensive for large programs; most tools relax one or both of the requirements for scalability. We argue that precise FCPA has been over-harshly judged---the vast majority of points-to pairs calculated by existing algorithms are never used by any client analysis or transformation because they involve dead variables. We therefore formulate a FCPA in terms of a joint points-to and liveness analysis which we call L-FCPA. We implemented a naive L-FCPA in GCC-4.6.0 using linked lists. Evaluation on SPEC2006 showed significant increase in the precision of points-to pairs compared to GCC's analysis. Interestingly, our naive implementation turned out to be faster than GCC's analysis for all programs under 30kLoC. Further, L-FCPA showed that fewer than 4{\%} of basic blocks had more than 8 points-to pairs. We conclude that the usable points-to information and the required context information is small and sparse and argue that approximations (e.g. weakening flow or context sensitivity) are not only undesirable but also unnecessary for performance.",
isbn="978-3-642-33125-1"
}

@inproceedings{Allen2015,
 author = {Allen, Nicholas and Krishnan, Padmanabhan and Scholz, Bernhard},
 title = {Combining Type-analysis with Points-to Analysis for Analyzing Java Library Source-code},
 booktitle = {Proceedings of the 4th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis},
 series = {SOAP 2015},
 year = {2015},
 isbn = {978-1-4503-3585-0},
 location = {Portland, OR, USA},
 pages = {13--18},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/2771284.2771287},
 doi = {10.1145/2771284.2771287},
 acmid = {2771287},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Libraries, Static Analysis, Type-based abstraction},
}

@inproceedings{Dietrich2015,
 author = {Dietrich, Jens and Hollingum, Nicholas and Scholz, Bernhard},
 title = {Giga-scale Exhaustive Points-to Analysis for Java in Under a Minute},
 booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
 series = {OOPSLA 2015},
 year = {2015},
 isbn = {978-1-4503-3689-5},
 location = {Pittsburgh, PA, USA},
 pages = {535--551},
 numpages = {17},
 url = {http://doi.acm.org/10.1145/2814270.2814307},
 doi = {10.1145/2814270.2814307},
 acmid = {2814307},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Context-free Language, Java, Points-to Analysis, Transitive Closure},
}

@inproceedings{Hassanshahi2017,
 author = {Hassanshahi, Behnaz and Ramesh, Raghavendra Kagalavadi and Krishnan, Padmanabhan and Scholz, Bernhard and Lu, Yi},
 title = {An Efficient Tunable Selective Points-to Analysis for Large Codebases},
 booktitle = {Proceedings of the 6th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis},
 series = {SOAP 2017},
 year = {2017},
 isbn = {978-1-4503-5072-3},
 location = {Barcelona, Spain},
 pages = {13--18},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/3088515.3088519},
 doi = {10.1145/3088515.3088519},
 acmid = {3088519},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {points-to analysis, selective context-sensitivity},
}

@inproceedings{Lam2005,
 author = {Lam, Monica S. and Whaley, John and Livshits, V. Benjamin and Martin, Michael C. and Avots, Dzintars and Carbin, Michael and Unkel, Christopher},
 title = {Context-sensitive Program Analysis As Database Queries},
 booktitle = {Proceedings of the Twenty-fourth ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems},
 series = {PODS '05},
 year = {2005},
 isbn = {1-59593-062-0},
 location = {Baltimore, Maryland},
 pages = {1--12},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1065167.1065169},
 doi = {10.1145/1065167.1065169},
 acmid = {1065169},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@InProceedings{Xu2009,
author="Xu, Guoqing
and Rountev, Atanas
and Sridharan, Manu",
editor="Drossopoulou, Sophia",
title="Scaling CFL-Reachability-Based Points-To Analysis Using Context-Sensitive Must-Not-Alias Analysis",
booktitle="ECOOP 2009 -- Object-Oriented Programming",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="98--122",
abstract="Pointer analyses derived from a Context-Free-Language (CFL) reachability formulation achieve very high precision, but they do not scale well to compute the points-to solution for an entire large program. Our goal is to increase significantly the scalability of the currently most precise points-to analysis for Java. This CFL-reachability analysis depends on determining whether two program variables may be aliases. We propose an efficient but less precise pre-analysis that computes context-sensitive must-not-alias information for all pairs of variables. Later, these results can be used to quickly filter out infeasible CFL-paths during the more precise points-to analysis. Several novel techniques are employed to achieve precision and efficiency, including a new approximate CFL-reachability formulation of alias analysis, as well as a carefully-chosen trade-off in context sensitivity. The approach effectively reduces the search space of the points-to analysis: the modified points-to analysis is more than three times faster than the original analysis.",
isbn="978-3-642-03013-0"
}

@inproceedings{Yan2011,
 author = {Yan, Dacong and Xu, Guoqing and Rountev, Atanas},
 title = {Demand-driven Context-sensitive Alias Analysis for Java},
 booktitle = {Proceedings of the 2011 International Symposium on Software Testing and Analysis},
 series = {ISSTA '11},
 year = {2011},
 isbn = {978-1-4503-0562-4},
 location = {Toronto, Ontario, Canada},
 pages = {155--165},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2001420.2001440},
 doi = {10.1145/2001420.2001440},
 acmid = {2001440},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {alias analysis, context sensitivity, demand-driven},
}

@inproceedings{Kashyap2014,
 author = {Kashyap, Vineeth and Dewey, Kyle and Kuefner, Ethan A. and Wagner, John and Gibbons, Kevin and Sarracino, John and Wiedermann, Ben and Hardekopf, Ben},
 title = {JSAI: A Static Analysis Platform for JavaScript},
 booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2014},
 year = {2014},
 isbn = {978-1-4503-3056-5},
 location = {Hong Kong, China},
 pages = {121--132},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2635868.2635904},
 doi = {10.1145/2635868.2635904},
 acmid = {2635904},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Abstract Interpretation, JavaScript Analysis},
}

@inproceedings{PadhyeK13,
author = {Rohan Padhye and
Uday P. Khedker},
title = {Interprocedural data flow analysis in Soot using value contexts},
booktitle = {Proceedings of the 2nd {ACM} {SIGPLAN} International Workshop on State
Of the Art in Java Program analysis, {SOAP} 2013, Seattle, WA, USA,
June 20, 2013},
pages = {31--36},
year = {2013},
crossref = {DBLP:conf/pldi/2013soap},
url = {http://doi.acm.org/10.1145/2487568.2487569},
doi = {10.1145/2487568.2487569},
timestamp = {Mon, 19 Dec 2016 07:38:57 +0100},
biburl = {https://dblp.org/rec/bib/conf/pldi/PadhyeK13},
bibsource = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{Might10,
author = {Might, Matthew and Smaragdakis, Yannis and Van Horn, David},
title = {Resolving and Exploiting the k-CFA Paradox: Illuminating Functional vs. Object-Oriented Program Analysis},
year = {2010},
isbn = {9781450300193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1806596.1806631},
doi = {10.1145/1806596.1806631},
abstract = {Low-level program analysis is a fundamental problem, taking the shape of "flow analysis"
in functional languages and "points-to" analysis in imperative and object-oriented
languages. Despite the similarities, the vocabulary and results in the two communities
remain largely distinct, with limited cross-understanding. One of the few links is
Shivers's k-CFA work, which has advanced the concept of "context-sensitive analysis"
and is widely known in both communities.Recent results indicate that the relationship
between the functional and object-oriented incarnations of k-CFA is not as well understood
as thought. Van Horn and Mairson proved k-CFA for k ≥ 1 to be EXPTIME-complete; hence,
no polynomial-time algorithm can exist. Yet, there are several polynomial-time formulations
of context-sensitive points-to analyses in object-oriented languages. Thus, it seems
that functional k-CFA may actually be a profoundly different analysis from object-oriented
k-CFA. We resolve this paradox by showing that the exact same specification of k-CFA
is polynomial-time for object-oriented languages yet exponential-time for functional
ones: objects and closures are subtly different, in a way that interacts crucially
with context-sensitivity and complexity. This illumination leads to an immediate payoff:
by projecting the object-oriented treatment of objects onto closures, we derive a
polynomial-time hierarchy of context-sensitive CFAs for functional programs.},
booktitle = {Proceedings of the 31st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {305--315},
numpages = {11},
keywords = {m-cfa, object-oriented, pointer analysis, static analysis, k-cfa, control-flow analysis, functional},
location = {Toronto, Ontario, Canada},
series = {PLDI '10}
}

@article{ideal17,
author = {Sp\"{a}th, Johannes and Ali, Karim and Bodden, Eric},
title = {IDEal: Efficient and Precise Alias-Aware Dataflow Analysis},
year = {2017},
issue_date = {October 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {OOPSLA},
url = {https://doi.org/10.1145/3133923},
doi = {10.1145/3133923},
abstract = { Program analyses frequently track objects throughout a program, which requires reasoning
about aliases. Most dataflow analysis frameworks, however, delegate the task of handling
aliases to the analysis clients, which causes a number of problems. For instance,
custom-made extensions for alias analysis are complex and cannot easily be reused.
On the other hand, due to the complex interfaces involved, off-the-shelf alias analyses
are hard to integrate precisely into clients. Lastly, for precision many clients require
strong updates, and alias abstractions supporting strong updates are often relatively
inefficient. In this paper, we present IDEal, an alias-aware extension to the framework
for Interprocedural Distributive Environment (IDE) problems. IDEal relieves static-analysis
authors completely of the burden of handling aliases by automatically resolving alias
queries on-demand, both efficiently and precisely. IDEal supports a highly precise
analysis using strong updates by resorting to an on-demand, flow-sensitive, and context-sensitive
all-alias analysis. Yet, it achieves previously unseen efficiency by propagating aliases
individually, creating highly reusable per-pointer summaries. We empirically evaluate
IDEal by comparing TSf, a state-of-the-art typestate analysis, to TSal, an IDEal-based
typestate analysis. Our experiments show that the individual propagation of aliases
within IDEal enables TSal to propagate 10.4x fewer dataflow facts and analyze 10.3x
fewer methods when compared to TSf. On the DaCapo benchmark suite, TSal is able to
efficiently compute precise results. },
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {99},
numpages = {27},
keywords = {static analysis, dataflow, aliasing}
}
@InProceedings{Boomerang16,
  author =	{Johannes Sp{\"a}th and Lisa Nguyen Quang Do and Karim Ali and Eric Bodden},
  title =	{{Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysis for Java}},
  booktitle =	{30th European Conference on Object-Oriented Programming (ECOOP 2016)},
  pages =	{22:1--22:26},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-014-9},
  ISSN =	{1868-8969},
  year =	{2016},
  volume =	{56},
  editor =	{Shriram Krishnamurthi and Benjamin S. Lerner},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2016/6116},
  URN =		{urn:nbn:de:0030-drops-61164},
  doi =		{10.4230/LIPIcs.ECOOP.2016.22},
  annote =	{Keywords: Demand-Driven; Static Analysis; IFDS; Aliasing; Points-to Analysis}
}
@article{ZipperJournal20,
author = {Li, Yue and Tan, Tian and M\o{}ller, Anders and Smaragdakis, Yannis},
title = {A Principled Approach to Selective Context Sensitivity for Pointer Analysis},
year = {2020},
issue_date = {May 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {2},
issn = {0164-0925},
url = {https://doi.org/10.1145/3381915},
doi = {10.1145/3381915},
abstract = {Context sensitivity is an essential technique for ensuring high precision in static analyses. It has been observed that applying context sensitivity partially, only on a select subset of the methods, can improve the balance between analysis precision and speed. However, existing techniques are based on heuristics that do not provide much insight into what characterizes this method subset. In this work, we present a more principled approach for identifying precision-critical methods, based on general patterns of value flows that explain where most of the imprecision arises in context-insensitive pointer analysis. Using this theoretical foundation, we present an efficient algorithm, ZIPPER, to recognize these flow patterns in a given program and employ context sensitivity accordingly. We also present a variant, ZIPPERe, that additionally takes into account which methods are disproportionally costly to analyze with context sensitivity.Our experimental results on standard benchmark and real-world Java programs show that ZIPPER preserves effectively all of the precision (98.8%) of a highly precise conventional context-sensitive pointer analysis (2-object-sensitive with a context-sensitive heap, 2obj for short), with a substantial speedup (on average, 3.4\texttimes{} and up to 9.4\texttimes{}), and that ZIPPERe preserves 94.7% of the precision of 2obj, with an order-of-magnitude speedup (on average, 25.5\texttimes{} and up to 88\texttimes{}). In addition, for 10 programs that cannot be analyzed by 2obj within a three-hour time limit, on average ZIPPERe can guide 2obj to finish analyzing them in less than 11 minutes with high precision compared to context-insensitive and introspective context-sensitive analyses.},
journal = {ACM Trans. Program. Lang. Syst.},
month = may,
articleno = {10},
numpages = {40},
keywords = {Static analysis, points-to analysis, Java}
}


@article{Graphick20,
author = {Jeon, Minseok and Lee, Myungho and Oh, Hakjoo},
title = {Learning Graph-Based Heuristics for Pointer Analysis without Handcrafting Application-Specific Features},
year = {2020},
issue_date = {November 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {OOPSLA},
url = {https://doi.org/10.1145/3428247},
doi = {10.1145/3428247},
abstract = {We present Graphick, a new technique for automatically learning graph-based heuristics for pointer analysis. Striking a balance between precision and scalability of pointer analysis requires designing good analysis heuristics. For example, because applying context sensitivity to all methods in a real-world program is impractical, pointer analysis typically uses a heuristic to employ context sensitivity only when it is necessary. Past research has shown that exploiting the program's graph structure is a promising way of developing cost-effective analysis heuristics, promoting the recent trend of ``graph-based heuristics'' that work on the graph representations of programs obtained from a pre-analysis. Although promising, manually developing such heuristics remains challenging, requiring a great deal of expertise and laborious effort. In this paper, we aim to reduce this burden by learning graph-based heuristics automatically, in particular without hand-crafted application-specific features. To do so, we present a feature language to describe graph structures and an algorithm for learning analysis heuristics within the language. We implemented Graphick on top of Doop and used it to learn graph-based heuristics for object sensitivity and heap abstraction. The evaluation results show that our approach is general and can generate high-quality heuristics. For both instances, the learned heuristics are as competitive as the existing state-of-the-art heuristics designed manually by analysis experts.},
journal = {Proc. ACM Program. Lang.},
month = nov,
articleno = {179},
numpages = {30},
keywords = {Data-driven static analysis, Context sensitivity, Machine learning for program analysis, Heap abstraction, Pointer analysis}
}


@inproceedings{He2020,
author = {He, Jingxuan and Singh, Gagandeep and P\"{u}schel, Markus and Vechev, Martin},
title = {Learning Fast and Precise Numerical Analysis},
year = {2020},
isbn = {9781450376136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385412.3386016},
doi = {10.1145/3385412.3386016},
abstract = {Numerical abstract domains are a key component of modern static analyzers. Despite recent advances, precise analysis with highly expressive domains remains too costly for many real-world programs. To address this challenge, we introduce a new data-driven method, called LAIT, that produces a faster and more scalable numerical analysis without significant loss of precision. Our approach is based on the key insight that sequences of abstract elements produced by the analyzer contain redundancy which can be exploited to increase performance without compromising precision significantly. Concretely, we present an iterative learning algorithm that learns a neural policy that identifies and removes redundant constraints at various points in the sequence. We believe that our method is generic and can be applied to various numerical domains.  We instantiate LAIT for the widely used Polyhedra and Octagon domains. Our evaluation of LAIT on a range of real-world applications with both domains shows that while the approach is designed to be generic, it is orders of magnitude faster on the most costly benchmarks than a state-of-the-art numerical library while maintaining close-to-original analysis precision. Further, LAIT outperforms hand-crafted heuristics and a domain-specific learning approach in terms of both precision and speed.},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {1112--1127},
numpages = {16},
keywords = {Abstract interpretation, Numerical domains, Machine learning, Performance optimization},
location = {London, UK},
series = {PLDI 2020}
}

@INPROCEEDINGS{vfix2019, author={X. {Xu} and Y. {Sui} and H. {Yan} and J. {Xue}}, booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)}, title={VFix: Value-Flow-Guided Precise Program Repair for Null Pointer Dereferences}, year={2019}, volume={}, number={}, pages={512-523},}

@inproceedings{Kapus2019, 
author = {Kapus, Timotej and Cadar, Cristian}, 
title = {A Segmented Memory Model for Symbolic Execution}, 
year = {2019}, 
booktitle = {Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering}
 }



 


@InProceedings{Bielik2017,
	author="Bielik, Pavol
	and Raychev, Veselin
	and Vechev, Martin",
	editor="Majumdar, Rupak
	and Kun{\v{c}}ak, Viktor",
	title="Learning a Static Analyzer from Data",
	booktitle="Computer Aided Verification",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="233--253",
	abstract="To be practically useful, modern static analyzers must precisely model the effect of both, statements in the programming language as well as frameworks used by the program under analysis. While important, manually addressing these challenges is difficult for at least two reasons: (i) the effects on the overall analysis can be non-trivial, and (ii) as the size and complexity of modern libraries increase, so is the number of cases the analysis must handle.",
	isbn="978-3-319-63387-9"
}








@inproceedings{Heo2019resource,
	author = {Heo, Kihong and Oh, Hakjoo and Yang, Hongseok},
	title = {Resource-aware Program Analysis via Online Abstraction Coarsening},
	booktitle = {Proceedings of the 41st International Conference on Software Engineering},
	series = {ICSE '19},
	year = {2019},
	location = {Montreal, Quebec, Canada},
	pages = {94--104},
	numpages = {11},
	url = {https://doi.org/10.1109/ICSE.2019.00027},
	doi = {10.1109/ICSE.2019.00027},
	acmid = {3339518},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
	keywords = {learning, resource constraint, static analysis},
} 


 

@inproceedings{Thakur2019,
	author = {Thakur, Manas and Nandivada, V. Krishna},
	title = {Compare Less, Defer More: Scaling Value-contexts Based Whole-program Heap Analyses},
	booktitle = {Proceedings of the 28th International Conference on Compiler Construction},
	series = {CC 2019},
	year = {2019},
	isbn = {978-1-4503-6277-1},
	location = {Washington, DC, USA},
	pages = {135--146},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/3302516.3307359},
	doi = {10.1145/3302516.3307359},
	acmid = {3307359},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Context sensitivity, LSRV contexts, Static program analysis, Value contexts},
} 

@article{Lu:2019:PYF,
 author = {Lu, Jingbo and Xue, Jingling},
 title = {Precision-preserving Yet Fast Object-sensitive Pointer Analysis with Partial Context Sensitivity},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {October 2019},
 volume = {3},
 number = {OOPSLA},
 month = oct,
 year = {2019},
 issn = {2475-1421},
 pages = {148:1--148:29},
 articleno = {148},
 numpages = {29},
 url = {http://doi.acm.org/10.1145/3360574},
 doi = {10.1145/3360574},
 acmid = {3360574},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {CFL Reachability, Object Sensitivity, Pointer Analysis},
} 






@inproceedings{Reps97,
	author = {Reps, Thomas},
	title = {Program Analysis via Graph Reachability},
	booktitle = {Proceedings of the 1997 International Symposium on Logic Programming},
	series = {ILPS '97},
	year = {1997},
	isbn = {0-262-63180-6},
	location = {Port Washington, New York, USA},
	pages = {5--19},
	numpages = {15},
	url = {http://dl.acm.org/citation.cfm?id=271338.271343},
	acmid = {271343},
	publisher = {MIT Press},
	address = {Cambridge, MA, USA},
} 


@inproceedings{SridharanDCST12,
 author = {Sridharan, Manu and Dolby, Julian and Chandra, Satish and Sch\"{a}fer, Max and Tip, Frank},
 title = {Correlation Tracking for Points-to Analysis of Javascript},
 booktitle = {Proceedings of the 26th European Conference on Object-Oriented Programming},
 series = {ECOOP'12},
 year = {2012},
 isbn = {978-3-642-31056-0},
 location = {Beijing, China},
 pages = {435--458},
 numpages = {24},
 url = {http://dx.doi.org/10.1007/978-3-642-31057-7_20},
 doi = {10.1007/978-3-642-31057-7_20},
 acmid = {2367191},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
 keywords = {call graph construction, javascript, points-to analysis},
}


@inproceedings{KastrinisS13a,
 author = {Kastrinis, George and Smaragdakis, Yannis},
 title = {Hybrid Context-sensitivity for Points-to Analysis},
 booktitle = {Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '13},
 year = {2013},
 isbn = {978-1-4503-2014-6},
 location = {Seattle, Washington, USA},
 pages = {423--434},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2491956.2462191},
 doi = {10.1145/2491956.2462191},
 acmid = {2462191},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {context-sensitivity, object-sensitivity, points-to analysis, type-sensitivity},
}


@inproceedings{BravenboerS09,
	author = {Bravenboer, Martin and Smaragdakis, Yannis},
	title = {Strictly Declarative Specification of Sophisticated Points-to Analyses},
	booktitle = {Proceedings of the 24th ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications},
	series = {OOPSLA '09},
	year = {2009},
	isbn = {978-1-60558-766-0},
	location = {Orlando, Florida, USA},
	pages = {243--262},
	numpages = {20},
	url = {http://doi.acm.org/10.1145/1640089.1640108},
	doi = {10.1145/1640089.1640108},
	acmid = {1640108},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {DOOP, bdds, datalog, declarative, points-to analysis},
} 




@article{JeJeOh18,
 author = {Jeon, Minseok and Jeong, Sehun and Oh, Hakjoo},
 title = {Precise and Scalable Points-to Analysis via Data-driven Context Tunneling},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {November 2018},
 volume = {2},
 number = {OOPSLA},
 month = oct,
 year = {2018},
 issn = {2475-1421},
 pages = {140:1--140:29},
 articleno = {140},
 numpages = {29},
 url = {http://doi.acm.org/10.1145/3276510},
 doi = {10.1145/3276510},
 acmid = {3276510},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Context-sensitive analysis, Data-driven program analysis, Points-to analysis},
} 

@inproceedings{Li2018b,
 author = {Li, Yue and Tan, Tian and M{\o}ller, Anders and Smaragdakis, Yannis},
 title = {Scalability-first Pointer Analysis with Self-tuning Context-sensitivity},
 booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
 series = {ESEC/FSE 2018},
 year = {2018},
 isbn = {978-1-4503-5573-5},
 location = {Lake Buena Vista, FL, USA},
 pages = {129--140},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/3236024.3236041},
 doi = {10.1145/3236024.3236041},
 acmid = {3236041},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Java, points-to analysis, static analysis},
} 
@article{Li2018a,
 author = {Li, Yue and Tan, Tian and M{\o}ller, Anders and Smaragdakis, Yannis},
 title = {Precision-guided Context Sensitivity for Pointer Analysis},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {November 2018},
 volume = {2},
 number = {OOPSLA},
 month = oct,
 year = {2018},
 issn = {2475-1421},
 pages = {141:1--141:29},
 articleno = {141},
 numpages = {29},
 url = {http://doi.acm.org/10.1145/3276511},
 doi = {10.1145/3276511},
 acmid = {3276511},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Java, points-to analysis, static analysis},
} 













@inproceedings{heo2017unsound,
 author = {Heo, Kihong and Oh, Hakjoo and Yi, Kwangkeun},
 title = {Machine-learning-guided Selectively Unsound Static Analysis},
 booktitle = {Proceedings of the 39th International Conference on Software Engineering},
 series = {ICSE '17},
 year = {2017},
 isbn = {978-1-5386-3868-2},
 location = {Buenos Aires, Argentina},
 pages = {519--529},
 numpages = {11},
 url = {https://doi.org/10.1109/ICSE.2017.54},
 doi = {10.1109/ICSE.2017.54},
 acmid = {3097430},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 keywords = {bug-finding, machine learning, static analysis},
}




@article{Pedregosa11,
	author = {Pedregosa, Fabian and Varoquaux, Ga\"{e}l and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and Vanderplas, Jake and Passos, Alexandre and Cournapeau, David and Brucher, Matthieu and Perrot, Matthieu and Duchesnay, \'{E}douard},
	title = {Scikit-learn: Machine Learning in Python},
	journal = {J. Mach. Learn. Res.},
	issue_date = {2/1/2011},
	volume = {12},
	month = nov,
	year = {2011},
	issn = {1532-4435},
	pages = {2825--2830},
	numpages = {6},
	url = {http://dl.acm.org/citation.cfm?id=1953048.2078195},
	acmid = {2078195},
	publisher = {JMLR.org},
} 


@ARTICLE{Silva2008, 
	author={V. {D'Silva} and D. {Kroening} and G. {Weissenbacher}}, 
	journal={IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems}, 
	title={A Survey of Automated Techniques for Formal Software Verification}, 
	year={2008}, 
	volume={27}, 
	number={7}, 
	pages={1165-1178}, 
	keywords={electronic engineering computing;program diagnostics;program verification;automated techniques;formal software verification;electronic systems;formal verification tools;automatic static analysis;programming error detection;abstract domains;bounded model checking;Software quality;Automatic testing;Formal verification;Hardware;Software systems;Software algorithms;Performance analysis;Algorithm design and analysis;Software performance;Automatic programming;Bounded model checking (BMC);model checking;predicate abstraction;software verification;static analysis}, 
	doi={10.1109/TCAD.2008.923410}, 
	ISSN={}, 
	month={July},}

@InProceedings{Blackshear2011,
	author="Blackshear, Sam
	and Chang, Bor-Yuh Evan
	and Sankaranarayanan, Sriram
	and Sridharan, Manu",
	editor="Yahav, Eran",
	title="The Flow-Insensitive Precision of Andersen's Analysis in Practice",
	booktitle="Static Analysis",
	year="2011",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="60--76",
	abstract="We present techniques for determining the precision gap between Andersen's points-to analysis and precise flow-insensitive points-to analysis in practice. While previous work has shown that such a gap may exist, no efficient algorithm for precise flow-insensitive analysis is known, making measurement of the gap on real-world programs difficult. We give an algorithm for precise flow-insensitive analysis of programs with finite memory, based on a novel technique for refining any points-to analysis with a search for flow-insensitive witnesses. We give a compact symbolic encoding of the technique that enables computing the search using a tuned SAT solver. We also present extensions of the algorithm that enable computing lower and upper bounds on the precision gap in the presence of dynamic memory allocation. In our experimental evaluation over a suite of small- to medium-sized C programs, we never observed a precision gap between Andersen's analysis and the precise analysis. In other words, Andersen's analysis computed a precise flow-insensitive result for all of our benchmarks. Hence, we conclude that while better algorithms for the precise flow-insensitive analysis are still of theoretical interest, their practical impact for C programs is likely to be negligible.",
	isbn="978-3-642-23702-7"
}
@inproceedings{Rival2011,
	author = {Rival, Xavier and Chang, Bor-Yuh Evan},
	title = {Calling Context Abstraction with Shapes},
	booktitle = {Proceedings of the 38th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	series = {POPL '11},
	year = {2011},
	isbn = {978-1-4503-0490-0},
	location = {Austin, Texas, USA},
	pages = {173--186},
	numpages = {14},
	url = {http://doi.acm.org/10.1145/1926385.1926406},
	doi = {10.1145/1926385.1926406},
	acmid = {1926406},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {calling context, context-sensitivity, inductive definitions, interprocedural analysis, separation logic, shape analysis, symbolic abstract domain},
}


@article{Stein2019,
	author = {Stein, Benno and Nielsen, Benjamin Barslev and Chang, Bor-Yuh Evan and M{\o}ller, Anders},
	title = {Static Analysis with Demand-driven Value Refinement},
	journal = {Proc. ACM Program. Lang.},
	issue_date = {October 2019},
	volume = {3},
	number = {OOPSLA},
	month = oct,
	year = {2019},
	issn = {2475-1421},
	pages = {140:1--140:29},
	articleno = {140},
	numpages = {29},
	url = {http://doi.acm.org/10.1145/3360566},
	doi = {10.1145/3360566},
	acmid = {3360566},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {JavaScript, abstract interpretation, dataflow analysis},
} 

@InProceedings{Adams2002,
	author="Adams, Stephen
	and Ball, Thomas
	and Das, Manuvir
	and Lerner, Sorin
	and Rajamani, Sriram K.
	and Seigle, Mark
	and Weimer, Westley",
	editor="Hermenegildo, Manuel V.
	and Puebla, Germ{\'a}n",
	title="Speeding Up Dataflow Analysis Using Flow-Insensitive Pointer Analysis",
	booktitle="Static Analysis",
	year="2002",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="230--246",
	abstract="In recent years, static analysis has increasingly been applied to the problem of program verification. Systems for program verification typically use precise and expensive interprocedural dataflow algorithms that are difficult to scale to large programs. An attractive way to scale these analyses is to use a preprocessing step to reduce the number of dataflow facts propagated by the analysis and/or the number of statements to be processed, before the dataflow analysis is run. This paper describes an approach that achieves this effect. We first run a scalable, control-flow-insensitive pointer analysis to produce a conservative representation of value flow in the program. We query the value flow representation at the program points where a dataflow solution is required, in order to obtain a conservative over-approximation of the dataflow facts and the statements that must be processed by the analysis. We then run the dataflow analysis on this ``slice'' of the program.",
	isbn="978-3-540-45789-3"
}
@inproceedings{Voung2007,
	author = {Voung, Jan Wen and Jhala, Ranjit and Lerner, Sorin},
	title = {RELAY: Static Race Detection on Millions of Lines of Code},
	booktitle = {Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
	series = {ESEC-FSE '07},
	year = {2007},
	isbn = {978-1-59593-811-4},
	location = {Dubrovnik, Croatia},
	pages = {205--214},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1287624.1287654},
	doi = {10.1145/1287624.1287654},
	acmid = {1287654},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {race detection, static analysis},
} 


@inproceedings{Chugh2008,
	author = {Chugh, Ravi and Voung, Jan W. and Jhala, Ranjit and Lerner, Sorin},
	title = {Dataflow Analysis for Concurrent Programs Using Datarace Detection},
	booktitle = {Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI '08},
	year = {2008},
	isbn = {978-1-59593-860-2},
	location = {Tucson, AZ, USA},
	pages = {316--326},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/1375581.1375620},
	doi = {10.1145/1375581.1375620},
	acmid = {1375620},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {interprocedural analysis, locksets, multithreaded programs, summaries},
}

@InProceedings{Kanade2005,
	author="Kanade, Aditya
	and Khedker, Uday
	and Sanyal, Amitabha",
	editor="Yi, Kwangkeun",
	title="Heterogeneous Fixed Points with Application to Points-To Analysis",
	booktitle="Programming Languages and Systems",
	year="2005",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="298--314",
	abstract="Many situations can be modeled as solutions of systems of simultaneous equations. If the functions of these equations monotonically increase in all bound variables, then the existence of extremal fixed point solutions for the equations is guaranteed. Among all solutions, these fixed points uniformly take least or greatest values for all bound variables. Hence, we call them homogeneous fixed points. However, there are systems of equations whose functions monotonically increase in some variables and decrease in others. The existence of solutions of such equations cannot be guaranteed using classical fixed point theory. In this paper, we define general conditions to guarantee the existence and computability of fixed point solutions of such equations. In contrast to homogeneous fixed points, these fixed points take least values for some variables and greatest values for others. Hence, we call them heterogeneous fixed points. We illustrate heterogeneous fixed point theory through points-to analysis.",
	isbn="978-3-540-32247-4"
}


@inproceedings{Santhiar2017,
	author = {Santhiar, Anirudh and Kanade, Aditya},
	title = {Static Deadlock Detection for Asynchronous C\# Programs},
	booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI 2017},
	year = {2017},
	isbn = {978-1-4503-4988-8},
	location = {Barcelona, Spain},
	pages = {292--305},
	numpages = {14},
	url = {http://doi.acm.org/10.1145/3062341.3062361},
	doi = {10.1145/3062341.3062361},
	acmid = {3062361},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Asynchronous programs, C\#, async/await, concurrency, static deadlock detection},
} 

@InProceedings{RSY05,
author="Rinetzky, Noam
and Sagiv, Mooly
and Yahav, Eran",
editor="Hankin, Chris
and Siveroni, Igor",
title="Interprocedural Shape Analysis for Cutpoint-Free Programs",
booktitle="Static Analysis",
year="2005",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="284--302",
abstract="We present a framework for interprocedural shape analysis, which is context- and flow-sensitive with the ability to perform destructive pointer updates. We limit our attention to cutpoint-free programs---programs in which reasoning on a procedure call only requires consideration of context reachable from the actual parameters. For such programs, we show that our framework is able to perform an efficient modular analysis. Technically, our analysis computes procedure summaries as transformers from inputs to outputs while ignoring parts of the heap not relevant to the procedure. This makes the analysis modular in the heap and thus allows reusing the effect of a procedure at different call-sites and even between different contexts occurring at the same call-site. We have implemented a prototype of our framework and used it to verify interesting properties of cutpoint-free programs, including partial correctness of a recursive quicksort implementation.",
isbn="978-3-540-31971-9"
}


@techreport{rinetzky2006,
	author = {Rinetzky, N. and Ramalingam, G. and Yahav, E. and Sagiv, M.},
	title = {Componentized heap abstraction},
	year = {2006},
	month = {December},
	abstract = {In this paper we present a new heap abstraction that seeks to strike a balance between the use of non-local (transitive) properties to gain precision and exploiting heap-locality. The abstraction represents the heap as an (evolving) tree of heapcomponents, with only a single heap-component being accessible at any time. The representation is tailored to yield several benefits: (a) It localizes the effect of heap mutation, enabling more efficient processing of heap mutations; (b) The representation is more space-efficient as it permits heap-components with isomorphic contents to use a shared representation; (c) It enables a more precise identification of the “input heap” to a procedure, increasing the reuse of summaries in a tabulationbased interprocedural analysis, making it more efficient. Furthermore, based on our new abstraction, an analysis can compute parameterized summaries which can be re-used for analyzing clients of instantiations of the generic data-structures.},
	url = {https://www.microsoft.com/en-us/research/publication/componentized-heap-abstraction/},
	number = {TAU-CS-164/06},
}

@InProceedings{Peleg2016,
	author="Peleg, Hila
	and Shoham, Sharon
	and Yahav, Eran",
	editor="Jobstmann, Barbara
	and Leino, K. Rustan M.",
	title="{$D^3$}: Data-Driven Disjunctive Abstraction",
	booktitle="Verification, Model Checking, and Abstract Interpretation",
	year="2016",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="185--205",
	abstract="We address the problem of computing an abstraction for a set of examples, which is precise enough to separate them from a set of counterexamples. The challenge is to find an over-approximation of the positive examples that does not represent any negative example. Conjunctive abstractions (e.g., convex numerical domains) and limited disjunctive abstractions, are often insufficient, as even the best such abstraction might include negative examples. One way to improve precision is to consider a general disjunctive abstraction.",
	isbn="978-3-662-49122-5"
}

@inproceedings{Si2018,
	author = {Si, Xujie and Dai, Hanjun and Raghothaman, Mukund and Naik, Mayur and Song, Le},
	title = {Learning Loop Invariants for Program Verification},
	booktitle = {Proceedings of the 32Nd International Conference on Neural Information Processing Systems},
	series = {NIPS'18},
	year = {2018},
	location = {Montr\&\#233;al, Canada},
	pages = {7762--7773},
	numpages = {12},
	url = {http://dl.acm.org/citation.cfm?id=3327757.3327873},
	acmid = {3327873},
	publisher = {Curran Associates Inc.},
	address = {USA},
}

@InProceedings{Feng15,
	author="Feng, Yu
	and Wang, Xinyu
	and Dillig, Isil
	and Dillig, Thomas",
	editor="Feng, Xinyu
	and Park, Sungwoo",
	title="Bottom-Up Context-Sensitive Pointer Analysis for Java",
	booktitle="Programming Languages and Systems",
	year="2015",
	publisher="Springer International Publishing",
	address="Cham",
	pages="465--484",
	abstract="This paper describes a new bottom-up, subset-based, and context-sensitive pointer analysis for Java. The main novelty of our technique is the constraint-based handling of virtual method calls and instantiation of method summaries. Since our approach generates polymorphic method summaries, it can be context-sensitive without reanalyzing the same method multiple times. We have implemented this algorithm in a tool called Scuba, and we compare it with k-CFA and k-obj algorithms on Java applications from the DaCapo and Ashes benchmarks. Our results show that the new algorithm achieves better or comparable precision to k-CFA and k-obj analyses at only a fraction of the cost.",
	isbn="978-3-319-26529-2"
}



@inproceedings{Dillig2008,
	author = {Dillig, Isil and Dillig, Thomas and Aiken, Alex},
	title = {Sound, Complete and Scalable Path-sensitive Analysis},
	booktitle = {Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI '08},
	year = {2008},
	isbn = {978-1-59593-860-2},
	location = {Tucson, AZ, USA},
	pages = {270--280},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/1375581.1375615},
	doi = {10.1145/1375581.1375615},
	acmid = {1375615},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {path- and context-sensitive analysis, static analysis, strongest necessary/weakest sufficient conditons},
} 


@inproceedings{Dillig2007,
	author = {Dillig, Isil and Dillig, Thomas and Aiken, Alex},
	title = {Static Error Detection Using Semantic Inconsistency Inference},
	booktitle = {Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI '07},
	year = {2007},
	isbn = {978-1-59593-633-2},
	location = {San Diego, California, USA},
	pages = {435--445},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/1250734.1250784},
	doi = {10.1145/1250734.1250784},
	acmid = {1250784},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {error detection, inconsistency, satisfiability, static analysis},
} 

@InProceedings{Das17,
	author="Das, Ankush
	and Lal, Akash",
	editor="D'Souza, Deepak
	and Narayan Kumar, K.",
	title="Precise Null Pointer Analysis Through Global Value Numbering",
	booktitle="Automated Technology for Verification and Analysis",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="25--41",
	abstract="Precise analysis of pointer information plays an important role in many static analysis tools. The precision, however, must be balanced against the scalability of the analysis. This paper focusses on improving the precision of standard context and flow insensitive alias analysis algorithms at a low scalability cost. In particular, we present a semantics-preserving program transformation that drastically improves the precision of existing analyses when deciding if a pointer can alias Null. Our program transformation is based on Global Value Numbering, a scheme inspired from compiler optimization literature. It allows even a flow-insensitive analysis to make use of branch conditions such as checking if a pointer is Null and gain precision. We perform experiments on real-world code and show that the transformation improves precision (in terms of the number of dereferences proved safe) from 86.56{\%} to 98.05{\%}, while incurring a small overhead in the running time.",
	isbn="978-3-319-68167-2"
}

@inproceedings{Rountev2000,
	author = {Rountev, Atanas and Chandra, Satish},
	title = {Off-line Variable Substitution for Scaling Points-to Analysis},
	booktitle = {Proceedings of the ACM SIGPLAN 2000 Conference on Programming Language Design and Implementation},
	series = {PLDI '00},
	year = {2000},
	isbn = {1-58113-199-2},
	location = {Vancouver, British Columbia, Canada},
	pages = {47--56},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/349299.349310},
	doi = {10.1145/349299.349310},
	acmid = {349310},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@article{Bruns2002,
	author = {Bruns, Glenn and Chandra, Satish},
	title = {Searching for Points-to Analysis},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {November 2002},
	volume = {27},
	number = {6},
	month = nov,
	year = {2002},
	issn = {0163-5948},
	pages = {61--70},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/605466.605476},
	doi = {10.1145/605466.605476},
	acmid = {605476},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@ARTICLE{Pistoia07, 
	author={M. {Pistoia} and S. {Chandra} and S. J. {Fink} and E. {Yahav}}, 
	journal={IBM Systems Journal}, 
	title={A survey of static analysis methods for identifying security vulnerabilities in software systems}, 
	year={2007}, 
	volume={46}, 
	number={2}, 
	pages={265-288}, 
	keywords={}, 
	doi={10.1147/sj.462.0265}, 
	ISSN={}, 
	month={},}

@inproceedings{Guyer2004,
	author = {Guyer, Samuel Z. and McKinley, Kathryn S.},
	title = {Finding Your Cronies: Static Analysis for Dynamic Object Colocation},
	booktitle = {Proceedings of the 19th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications},
	series = {OOPSLA '04},
	year = {2004},
	isbn = {1-58113-831-8},
	location = {Vancouver, BC, Canada},
	pages = {237--250},
	numpages = {14},
	url = {http://doi.acm.org/10.1145/1028976.1028996},
	doi = {10.1145/1028976.1028996},
	acmid = {1028996},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {compiler-assisted memory, cooperative optimization, management, static analysis},
}

@inproceedings{Tok2006,
	author = {Tok, Teck Bok and Guyer, Samuel Z. and Lin, Calvin},
	title = {Efficient Flow-sensitive Interprocedural Data-flow Analysis in the Presence of Pointers},
	booktitle = {Proceedings of the 15th International Conference on Compiler Construction},
	series = {CC'06},
	year = {2006},
	isbn = {3-540-33050-X, 978-3-540-33050-9},
	location = {Vienna, Austria},
	pages = {17--31},
	numpages = {15},
	url = {http://dx.doi.org/10.1007/11688839_3},
	doi = {10.1007/11688839_3},
	acmid = {2182108},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
}

@inproceedings{Raychev2015,
	author = {Raychev, Veselin and Vechev, Martin and Krause, Andreas},
	title = {Predicting Program Properties from "Big Code"},
	booktitle = {Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	series = {POPL '15},
	year = {2015},
	isbn = {978-1-4503-3300-9},
	location = {Mumbai, India},
	pages = {111--124},
	numpages = {14},
	url = {http://doi.acm.org/10.1145/2676726.2677009},
	doi = {10.1145/2676726.2677009},
	acmid = {2677009},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {big code, closure compiler, conditional random fields, javascript, names, program properties, structured prediction, types},
} 

@inproceedings{Katz2016,
	author = {Katz, Omer and El-Yaniv, Ran and Yahav, Eran},
	title = {Estimating Types in Binaries Using Predictive Modeling},
	booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	series = {POPL '16},
	year = {2016},
	isbn = {978-1-4503-3549-2},
	location = {St. Petersburg, FL, USA},
	pages = {313--326},
	numpages = {14},
	url = {http://doi.acm.org/10.1145/2837614.2837674},
	doi = {10.1145/2837614.2837674},
	acmid = {2837674},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {reverse engineering, static binary analysis, x86},
} 


@inproceedings{Grigore2016,
	author = {Grigore, Radu and Yang, Hongseok},
	title = {Abstraction Refinement Guided by a Learnt Probabilistic Model},
	booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	series = {POPL '16},
	year = {2016},
	isbn = {978-1-4503-3549-2},
	location = {St. Petersburg, FL, USA},
	pages = {485--498},
	numpages = {14},
	url = {http://doi.acm.org/10.1145/2837614.2837663},
	doi = {10.1145/2837614.2837663},
	acmid = {2837663},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Datalog, Horn, hypergraph, probability},
} 

@inproceedings{Chibotaru2019,
	author = {Chibotaru, Victor and Bichsel, Benjamin and Raychev, Veselin and Vechev, Martin},
	title = {Scalable Taint Specification Inference with Big Code},
	booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI 2019},
	year = {2019},
	isbn = {978-1-4503-6712-7},
	location = {Phoenix, AZ, USA},
	pages = {760--774},
	numpages = {15},
	url = {http://doi.acm.org/10.1145/3314221.3314648},
	doi = {10.1145/3314221.3314648},
	acmid = {3314648},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Big Code, Specification Inference, Taint Analysis},
} 

@inproceedings{Heo2019,
	author = {Heo, Kihong and Raghothaman, Mukund and Si, Xujie and Naik, Mayur},
	title = {Continuously Reasoning About Programs Using Differential Bayesian Inference},
	booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI 2019},
	year = {2019},
	isbn = {978-1-4503-6712-7},
	location = {Phoenix, AZ, USA},
	pages = {561--575},
	numpages = {15},
	url = {http://doi.acm.org/10.1145/3314221.3314616},
	doi = {10.1145/3314221.3314616},
	acmid = {3314616},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Static analysis, alarm prioritization, alarm relevance, continuous integration, software evolution},
} 

@article{Bader2019,
	author = {Bader, Johannes and Scott, Andrew and Pradel, Michael and Chandra, Satish},
	title = {Getafix: Learning to Fix Bugs Automatically},
	journal = {Proc. ACM Program. Lang.},
	issue_date = {October 2019},
	volume = {3},
	number = {OOPSLA},
	month = oct,
	year = {2019},
	issn = {2475-1421},
	pages = {159:1--159:27},
	articleno = {159},
	numpages = {27},
	url = {http://doi.acm.org/10.1145/3360585},
	doi = {10.1145/3360585},
	acmid = {3360585},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Automated program repair, Code transform, Patch generation},
} 

@inproceedings{Gopinath2014,
	author = {Gopinath, Divya and Khurshid, Sarfraz and Saha, Diptikalyan and Chandra, Satish},
	title = {Data-guided Repair of Selection Statements},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	series = {ICSE 2014},
	year = {2014},
	isbn = {978-1-4503-2756-5},
	location = {Hyderabad, India},
	pages = {243--253},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/2568225.2568303},
	doi = {10.1145/2568225.2568303},
	acmid = {2568303},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {ABAP, Databases, Machine Learning, Program Repair, SAT, Support Vector Machines, data-centric programs},
} 

@inproceedings{Feng2014,
 author = {Feng, Yu and Anand, Saswat and Dillig, Isil and Aiken, Alex},
 title = {Apposcopy: Semantics-based Detection of Android Malware Through Static Analysis},
 booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2014},
 year = {2014},
 isbn = {978-1-4503-3056-5},
 location = {Hong Kong, China},
 pages = {576--587},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2635868.2635869},
 doi = {10.1145/2635868.2635869},
 acmid = {2635869},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Android, Inter-component Call Graph, Taint Analysis},
} 

@inproceedings{Zhang2014b,
	author = {Zhang, Xin and Mangal, Ravi and Naik, Mayur and Yang, Hongseok},
	title = {Hybrid Top-down and Bottom-up Interprocedural Analysis},
	booktitle = {Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI '14},
	year = {2014},
	isbn = {978-1-4503-2784-8},
	location = {Edinburgh, United Kingdom},
	pages = {249--258},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/2594291.2594328},
	doi = {10.1145/2594291.2594328},
	acmid = {2594328},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@inproceedings{TrippPFSW09,
 author = {Tripp, Omer and Pistoia, Marco and Fink, Stephen J. and Sridharan, Manu and Weisman, Omri},
 title = {TAJ: Effective Taint Analysis of Web Applications},
 booktitle = {Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '09},
 year = {2009},
 isbn = {978-1-60558-392-1},
 location = {Dublin, Ireland},
 pages = {87--97},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1542476.1542486},
 doi = {10.1145/1542476.1542486},
 acmid = {1542486},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {java, program analysis, security, slicing, static analysis, taint analysis, web application},
} 


@inproceedings{SridharanFB07,
 author = {Sridharan, Manu and Fink, Stephen J. and Bodik, Rastislav},
 title = {Thin Slicing},
 booktitle = {Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '07},
 year = {2007},
 isbn = {978-1-59593-633-2},
 location = {San Diego, California, USA},
 pages = {112--122},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1250734.1250748},
 doi = {10.1145/1250734.1250748},
 acmid = {1250748},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {debugging, program understanding, slicing},
} 



@InProceedings{MangalNY14,
author="Mangal, Ravi
and Naik, Mayur
and Yang, Hongseok",
editor="Shao, Zhong",
title="A Correspondence between Two Approaches to Interprocedural Analysis in the Presence of Join",
booktitle="Programming Languages and Systems",
year="2014",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="513--533",
abstract="Many interprocedural static analyses perform a lossy join for reasons of termination or efficiency. We study the relationship between two predominant approaches to interprocedural analysis, the summary-based (or functional) approach and the call-strings (or k-CFA) approach, in the presence of a lossy join. Despite the use of radically different ways to distinguish procedure contexts by these two approaches, we prove that post-processing their results using a form of garbage collection renders them equivalent. Our result extends the classic result by Sharir and Pnueli that showed the equivalence between these two approaches in the setting of distributive analysis, wherein the join is lossless.",
isbn="978-3-642-54833-8"
}

@inproceedings{RaghothamanKHN18,
 author = {Raghothaman, Mukund and Kulkarni, Sulekha and Heo, Kihong and Naik, Mayur},
 title = {User-guided Program Reasoning Using Bayesian Inference},
 booktitle = {Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI 2018},
 year = {2018},
 isbn = {978-1-4503-5698-5},
 location = {Philadelphia, PA, USA},
 pages = {722--735},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/3192366.3192417},
 doi = {10.1145/3192366.3192417},
 acmid = {3192417},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Bayesian inference, Static analysis, alarm ranking, belief networks},
} 


@inproceedings{JoshiPSN09,
 author = {Joshi, Pallavi and Park, Chang-Seo and Sen, Koushik and Naik, Mayur},
 title = {A Randomized Dynamic Program Analysis Technique for Detecting Real Deadlocks},
 booktitle = {Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '09},
 year = {2009},
 isbn = {978-1-60558-392-1},
 location = {Dublin, Ireland},
 pages = {110--120},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1542476.1542489},
 doi = {10.1145/1542476.1542489},
 acmid = {1542489},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {active testing, concurrency, deadlock detection, dynamic program analysis},
} 

@inproceedings{NaikPSG09,
 author = {Naik, Mayur and Park, Chang-Seo and Sen, Koushik and Gay, David},
 title = {Effective Static Deadlock Detection},
 booktitle = {Proceedings of the 31st International Conference on Software Engineering},
 series = {ICSE '09},
 year = {2009},
 isbn = {978-1-4244-3453-4},
 pages = {386--396},
 numpages = {11},
 url = {http://dx.doi.org/10.1109/ICSE.2009.5070538},
 doi = {10.1109/ICSE.2009.5070538},
 acmid = {1555052},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 
@inproceedings{NaikA07,
 author = {Naik, Mayur and Aiken, Alex},
 title = {Conditional Must Not Aliasing for Static Race Detection},
 booktitle = {Proceedings of the 34th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '07},
 year = {2007},
 isbn = {1-59593-575-4},
 location = {Nice, France},
 pages = {327--338},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1190216.1190265},
 doi = {10.1145/1190216.1190265},
 acmid = {1190265},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Java, concurrency, multi-threading, static race detection, synchronization},
}

@inproceedings{KastrinisS13b,
 author = {Kastrinis, George and Smaragdakis, Yannis},
 title = {Efficient and Effective Handling of Exceptions in Java Points-to Analysis},
 booktitle = {Proceedings of the 22Nd International Conference on Compiler Construction},
 series = {CC'13},
 year = {2013},
 isbn = {978-3-642-37050-2},
 location = {Rome, Italy},
 pages = {41--60},
 numpages = {20},
 url = {http://dx.doi.org/10.1007/978-3-642-37051-9_3},
 doi = {10.1007/978-3-642-37051-9_3},
 acmid = {2450254},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
} 

@inproceedings{ParizekL11,
 author = {Parizek, Pavel and Parizek, Pavel and Lhotak, Ondrej},
 title = {Identifying Future Field Accesses in Exhaustive State Space Traversal},
 booktitle = {Proceedings of the 2011 26th IEEE/ACM International Conference on Automated Software Engineering},
 series = {ASE '11},
 year = {2011},
 isbn = {978-1-4577-1638-6},
 pages = {93--102},
 numpages = {10},
 url = {http://dx.doi.org/10.1109/ASE.2011.6100154},
 doi = {10.1109/ASE.2011.6100154},
 acmid = {2190156},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

@Article{Lhotak2009,
	author =       "Ond\v{r}ej Lhot\'{a}k and Stephen Curial and Jos\'{e} Nelson Amaral",
	title =        "Using {XBDD}s and {ZBDD}s in points-to analysis",
	journal =      "Software, Practice and Experience",
	volume =       "39",
	number =       "2",
	year =         "2009",
	pages =        "163--188",
	publisher =    "Wiley",
}
 

@inproceedings{GordonKPGNR_NDSS15,
  author    = {Michael I. Gordon and
               Deokhwan Kim and
               Jeff H. Perkins and
               Limei Gilham and
               Nguyen Nguyen and
               Martin C. Rinard},
  title     = {Information Flow Analysis of Android Applications in DroidSafe},
  booktitle = {22nd Annual Network and Distributed System Security Symposium, {NDSS}
               2015, San Diego, California, USA, February 8-11, 2015},
  publisher = {The Internet Society},
  year      = {2015},
  url       = {https://www.ndss-symposium.org/ndss2015/information-flow-analysis-android-applications-droidsafe},
  timestamp = {Tue, 16 Jan 2018 13:23:48 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/ndss/GordonKPGNR15},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}





@Article{Heo2018,
	author="Heo, Kihong
	and Oh, Hakjoo
	and Yang, Hongseok",
	title="Learning analysis strategies for octagon and context sensitivity from labeled data generated by static analyses",
	journal="Formal Methods in System Design",
	year="2018",
	month="Oct",
	day="01",
	volume="53",
	number="2",
	pages="189--220",
	abstract="We present a method for automatically learning an effective strategy for clustering variables for the Octagon analysis from a given codebase. This learned strategy works as a preprocessor of Octagon. Given a program to be analyzed, the strategy is first applied to the program and clusters variables in it. We then run a partial variant of the Octagon analysis that tracks relationships among variables within the same cluster, but not across different clusters. The notable aspect of our learning method is that although the method is based on supervised learning, it does not require manually-labeled data. The method does not ask human to indicate which pairs of program variables in the given codebase should be tracked. Instead it uses the impact pre-analysis for Octagon from our previous work and automatically labels variable pairs in the codebase as positive or negative. We implemented our method on top of a static buffer-overflow detector for C programs and tested it against open source benchmarks. Our experiments show that the partial Octagon analysis with the learned strategy scales up to 100KLOC and is 33{\$}{\$}{\backslash}times {\$}{\$}{\texttimes}faster than the one with the impact pre-analysis (which itself is significantly faster than the original Octagon analysis), while increasing false alarms by only 2{\%}. The general idea behind our methodis applicable to other types of static analyses as well. We demonstrate that our method is also effective to learn a strategy for context-sensitivity of interval analysis.",
	issn="1572-8102",
	doi="10.1007/s10703-017-0306-7",
	url="https://doi.org/10.1007/s10703-017-0306-7"
}

@Inbook{SridharanCDFY13,
author="Sridharan, Manu
and Chandra, Satish
and Dolby, Julian
and Fink, Stephen J.
and Yahav, Eran",
title="Alias Analysis for Object-Oriented Programs",
bookTitle="Aliasing in Object-Oriented Programming. Types, Analysis and Verification",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="196--232",
abstract="We present a high-level survey of state-of-the-art alias analyses for object-oriented programs, based on a years-long effort developing industrial-strength static analyses for Java. We first present common variants of points-to analysis, including a discussion of key implementation techniques. We then describe flow-sensitive techniques based on tracking of access paths, which can yield greater precision for certain clients. We also discuss how whole-program alias analysis has become less useful for modern Java programs, due to increasing use of reflection in libraries and frameworks. We have found that for real-world programs, an under-approximate alias analysis based on access-path tracking often provides the best results for a variety of practical clients.",
isbn="978-3-642-36946-9",
doi="10.1007/978-3-642-36946-9_8",
url="https://doi.org/10.1007/978-3-642-36946-9_8"
}

@inproceedings{NaikAW06,
 author = {Naik, Mayur and Aiken, Alex and Whaley, John},
 title = {Effective Static Race Detection for Java},
 booktitle = {Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '06},
 year = {2006},
 isbn = {1-59593-320-4},
 location = {Ottawa, Ontario, Canada},
 pages = {308--319},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1133981.1134018},
 doi = {10.1145/1133981.1134018},
 acmid = {1134018},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Java, concurrency, multi-threading, static race detection, synchronization},
}



@inproceedings{Cai2018,
	author = {Cai, Cheng and Zhang, Qirun and Zuo, Zhiqiang and Nguyen, Khanh and Xu, Guoqing and Su, Zhendong},
	title = {Calling-to-reference Context Translation via Constraint-guided CFL-reachability},
	booktitle = {Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI 2018},
	year = {2018},
	isbn = {978-1-4503-5698-5},
	location = {Philadelphia, PA, USA},
	pages = {196--210},
	numpages = {15},
	url = {http://doi.acm.org/10.1145/3192366.3192378},
	doi = {10.1145/3192366.3192378},
	acmid = {3192378},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Static analysis, dynamic analysis, heap dump},
}

 
@article{CHA20181,
	title = "A scalable learning algorithm for data-driven program analysis",
	journal = "Information and Software Technology",
	volume = "104",
	pages = "1 - 13",
	year = "2018",
	issn = "0950-5849",
	doi = "https://doi.org/10.1016/j.infsof.2018.07.002",
	url = "http://www.sciencedirect.com/science/article/pii/S0950584918301368",
	author = "Sooyoung Cha and Sehun Jeong and Hakjoo Oh",
	keywords = "Data-driven program analysis, Learning algorithm",
	abstract = "Context: Recently data-driven program analysis has emerged as a promising approach for building cost-effective static analyzers. The ideal static analyzer should apply accurate but costly techniques only when they benefit. However, designing such a strategy for real-world programs is highly nontrivial and requires labor-intensive work. The goal of data-driven program analysis is to automate this process by learning the strategy from data through a learning algorithm. Objective: Current learning algorithms for data-driven program analysis are not scalable enough to be used with large codebases. The objective of this paper is to overcome this shortcoming and present a new algorithm that is able to efficiently learn a strategy from large codebases. Method: The key idea is to use an oracle and transform the existing blackbox learning problem into a whitebox one that is much easier to solve. The oracle quantifies the relative importance of each part of the program with respect to the analysis precision. The oracle can be obtained by running the most and least precise analyses only once over the codebase. Results: Our learning algorithm is much faster than the existing algorithms while producing high quality strategies. The evaluation is done with 140 open-source C programs, comprising of 2.1 MLoC in total. Learning at this large scale was previously impractical. Conclusion: Our work advances the state-of-the-art of data-driven program analysis by addressing the scalability issue of the existing learning algorithm. Our technique will make the data-driven approach more practical in the real-world."
}

@article{Heo2018Toplas,
	author = {Heo, Kihong and Oh, Hakjoo and Yang, Hongseok and Yi, Kwangkeun},
	title = {Adaptive Static Analysis via Learning with Bayesian Optimization},
	journal = {ACM Trans. Program. Lang. Syst.},
	issue_date = {December 2018},
	volume = {40},
	number = {4},
	month = nov,
	year = {2018},
	issn = {0164-0925},
	pages = {14:1--14:37},
	articleno = {14},
	numpages = {37},
	url = {http://doi.acm.org/10.1145/3121135},
	doi = {10.1145/3121135},
	acmid = {3121135},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Bayesian optimization, Static program analysis, data-driven program analysis},
} 

@article{Jeon2019,
	author = {Jeon, Minseok and Jeong, Sehun and Cha, Sungdeok and Oh, Hakjoo},
	title = {A Machine-Learning Algorithm with Disjunctive Model for Data-Driven Program Analysis},
	journal = {ACM Trans. Program. Lang. Syst.},
	issue_date = {June 2019},
	volume = {41},
	number = {2},
	month = jun,
	year = {2019},
	issn = {0164-0925},
	pages = {13:1--13:41},
	articleno = {13},
	numpages = {41},
	url = {http://doi.acm.org/10.1145/3293607},
	doi = {10.1145/3293607},
	acmid = {3293607},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Data-driven program analysis, context-sensitivity, flow-sensitivity, static analysis},
}
@InProceedings{Dan17,
author="Dan, Andrei Marian
and Sridharan, Manu
and Chandra, Satish
and Jeannin, Jean-Baptiste
and Vechev, Martin",
editor="Majumdar, Rupak
and Kun{\v{c}}ak, Viktor",
title="Finding Fix Locations for CFL-Reachability Analyses via Minimum Cuts",
booktitle="Computer Aided Verification",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="521--541",
abstract="Static analysis tools are increasingly important for ensuring code quality. Ideally, all warnings from a static analysis would be addressed, but the volume of warnings and false positives usually makes this effort prohibitive. We present techniques for finding fix locations, a small set of program locations where fixes can be applied to address all static analysis warnings. We focus on analyses expressible as context-free-language reachability, where a set of fix locations is naturally expressed as a min-cut of the CFL graph. We show, surprisingly, that computing such a CFL min-cut is NP-hard. We then phrase the problem of finding CFL min-cuts as an optimization problem which allows us to trade-off the size of the cut vs. the preservation of computed information. We then show how to solve the optimization problem via a MaxSAT encoding.",
isbn="978-3-319-63390-9"
}


@phdthesis{Lhotak:2006:PAU:1293203,
 author = {Lhotak, Ondrej},
 title = {Program Analysis Using Binary Decision Diagrams},
 year = {2006},
 isbn = {978-0-494-25195-9},
 note = {AAINR25195},
 publisher = {McGill University},
 address = {Montreal, Que., Canada, Canada},
} 







@InProceedings{heo2016learning,
author="Heo, Kihong
and Oh, Hakjoo
and Yang, Hongseok",
editor="Rival, Xavier",
title="Learning a Variable-Clustering Strategy for Octagon from Labeled Data Generated by a Static Analysis",
booktitle="Static Analysis",
year="2016",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="237--256",
abstract="We present a method for automatically learning an effective strategy for clustering variables for the Octagon analysis from a given codebase. This learned strategy works as a preprocessor of Octagon. Given a program to be analyzed, the strategy is first applied to the program and clusters variables in it. We then run a partial variant of the Octagon analysis that tracks relationships among variables within the same cluster, but not across different clusters. The notable aspect of our learning method is that although the method is based on supervised learning, it does not require manually-labeled data. The method does not ask human to indicate which pairs of program variables in the given codebase should be tracked. Instead it uses the impact pre-analysis for Octagon from our previous work and automatically labels variable pairs in the codebase as positive or negative. We implemented our method on top of a static buffer-overflow detector for C programs and tested it against open source benchmarks. Our experiments show that the partial Octagon analysis with the learned strategy scales up to 100KLOC and is 33x faster than the one with the impact pre-analysis (which itself is significantly faster than the original Octagon analysis), while increasing false alarms by only 2 {\%}.",
isbn="978-3-662-53413-7"
}





@article{specjvm98,
  title={Release 1.03},
  author={SPECjvm98, SPEC},
  journal={Standard Performance Evaluation Corporation},
  year={1999}
}


@inproceedings{Anderson19,
author = {Anderson, Greg and Pailoor, Shankara and Dillig, Isil and Chaudhuri, Swarat},
title = {Optimization and Abstraction: A Synergistic Approach for Analyzing Neural Network Robustness},
year = {2019},
isbn = {9781450367127},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3314221.3314614},
doi = {10.1145/3314221.3314614},
booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {731--744},
numpages = {14},
keywords = {Optimization, Robustness, Abstract Interpretation, Machine learning},
location = {Phoenix, AZ, USA},
series = {PLDI 2019}
}
@article{Rama18,
	author = {Rama, Girish Maskeri and Komondoor, Raghavan and Sharma, Himanshu},
	title = {Refinement in Object-Sensitivity Points-to Analysis via Slicing},
	year = {2018},
	issue_date = {November 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {2},
	number = {OOPSLA},
	url = {https://doi.org/10.1145/3276512},
	doi = {10.1145/3276512},
	journal = {Proc. ACM Program. Lang.},
	month = oct,
	articleno = {142},
	numpages = {27},
	keywords = {Java, Precise and scalable points-to analysis, client-driven refinement}
}
@inproceedings{Naik12,
	author = {Naik, Mayur and Yang, Hongseok and Castelnuovo, Ghila and Sagiv, Mooly},
	title = {Abstractions from Tests},
	year = {2012},
	isbn = {9781450310833},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2103656.2103701},
	doi = {10.1145/2103656.2103701},
	booktitle = {Proceedings of the 39th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	pages = {373--386},
	numpages = {14},
	keywords = {testing, points-to analysis, parametrised static analysis, thread-escape analysis, necessary-condition problem},
	location = {Philadelphia, PA, USA},
	series = {POPL '12}
}

@inproceedings{Tonella05,
author = {Tonella, Paolo},
title = {Reverse Engineering of Object Oriented Code},
year = {2005},
isbn = {1581139632},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1062455.1062637},
doi = {10.1145/1062455.1062637},
booktitle = {Proceedings of the 27th International Conference on Software Engineering},
pages = {724--725},
numpages = {2},
keywords = {diagram recovery, static code analysis, object oriented programming},
location = {St. Louis, MO, USA},
series = {ICSE '05}
}

@article{Grech17,
author = {Grech, Neville and Smaragdakis, Yannis},
title = {P/Taint: Unified Points-to and Taint Analysis},
year = {2017},
issue_date = {October 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {OOPSLA},
url = {https://doi.org/10.1145/3133926},
doi = {10.1145/3133926},
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {Article 102},
numpages = {28},
keywords = {Android, Taint Analysis, Pointer Analysis}
}

@inproceedings{Zhang13,
author = {Zhang, Xin and Naik, Mayur and Yang, Hongseok},
title = {Finding Optimum Abstractions in Parametric Dataflow Analysis},
year = {2013},
isbn = {9781450320146},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491956.2462185},
doi = {10.1145/2491956.2462185},
booktitle = {Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {365--376},
numpages = {12},
keywords = {optimum abstraction, under-approximation, CEGAR, impossibility, dataflow analysis, abstraction refinement},
location = {Seattle, Washington, USA},
series = {PLDI '13}
}


@article{Lu2019,
	author = {Lu, Jingbo and Xue, Jingling},
	title = {Precision-Preserving yet Fast Object-Sensitive Pointer Analysis with Partial Context Sensitivity},
	year = {2019},
	issue_date = {October 2019},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {3},
	number = {OOPSLA},
	url = {https://doi.org/10.1145/3360574},
	doi = {10.1145/3360574},
	journal = {Proc. ACM Program. Lang.},
	month = oct,
	articleno = {Article 148},
	numpages = {29},
	keywords = {Object Sensitivity, CFL Reachability, Pointer Analysis}
}









@article{LiangTNS10,
 author = {Liang, Percy and Tripp, Omer and Naik, Mayur and Sagiv, Mooly},
 title = {A Dynamic Evaluation of the Precision of Static Heap Abstractions},
 journal = {SIGPLAN Not.},
 issue_date = {October 2010},
 volume = {45},
 number = {10},
 month = oct,
 year = {2010},
 issn = {0362-1340},
 pages = {411--427},
 numpages = {17},
 url = {http://doi.acm.org/10.1145/1932682.1869494},
 doi = {10.1145/1932682.1869494},
 acmid = {1869494},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {concurrency, dynamic analysis, heap abstractions, static analysis},
}



@InProceedings{SmaragdakisK18,
  author =	{Yannis Smaragdakis and George Kastrinis},
  title =	{{Defensive Points-To Analysis: Effective Soundness via Laziness}},
  booktitle =	{32nd European Conference on Object-Oriented Programming  (ECOOP 2018)},
  pages =	{23:1--23:28},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-079-8},
  ISSN =	{1868-8969},
  year =	{2018},
  volume =	{109},
  editor =	{Todd Millstein},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2018/9228},
  URN =		{urn:nbn:de:0030-drops-92287},
  doi =		{10.4230/LIPIcs.ECOOP.2018.23},
  annote =	{Keywords: static analysis, soundness, defensive analysis}
}


@inproceedings{PetrashkoULO16,
 author = {Petrashko, Dmitry and Ureche, Vlad and Lhot\'{a}k, Ond\v{r}ej and Odersky, Martin},
 title = {Call Graphs for Languages with Parametric Polymorphism},
 booktitle = {Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
 series = {OOPSLA 2016},
 year = {2016},
 isbn = {978-1-4503-4444-9},
 location = {Amsterdam, Netherlands},
 pages = {394--409},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/2983990.2983991},
 doi = {10.1145/2983990.2983991},
 acmid = {2983991},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {call graphs, parametric polymorphism, specialization, static analysis},
} 









@inproceedings{saver2020,
author = {Hong, Seongjoon and Lee, Junhee and Lee, Jeongsoo and Oh, Hakjoo},
title = {SAVER: Scalable, Precise, and Safe Memory-Error Repair},
year = {2020},
isbn = {9781450371216},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377811.3380323},
doi = {10.1145/3377811.3380323},
abstract = {We present SAVER, a new memory-error repair technique for C programs. Memory errors such as memory leak, double-free, and use-after-free are highly prevalent and fixing them requires significant effort. Automated program repair techniques hold the promise of reducing this burden but the state-of-the-art is still unsatisfactory. In particular, no existing techniques are able to fix those errors in a scalable, precise, and safe way, all of which are required for a truly practical tool. SAVER aims to address these shortcomings. To this end, we propose a method based on a novel representation of the program called object flow graph, which summarizes the program's heap-related behavior using static analysis. We show that fixing memory errors can be formulated as a graph labeling problem over object flow graph and present an efficient algorithm. We evaluated SAVER in combination with Infer, an industrial-strength static bug-finder, and show that 74% of the reported errors can be fixed automatically for a range of open-source C programs.},
booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
pages = {271--283},
numpages = {13},
keywords = {program repair, debugging, memory errors, program analysis},
location = {Seoul, South Korea},
series = {ICSE '20}
}


@inproceedings{He20pldi,
author = {He, Jingxuan and Singh, Gagandeep and P\"{u}schel, Markus and Vechev, Martin},
title = {Learning Fast and Precise Numerical Analysis},
year = {2020},
isbn = {9781450376136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385412.3386016},
doi = {10.1145/3385412.3386016},
abstract = {Numerical abstract domains are a key component of modern static analyzers. Despite recent advances, precise analysis with highly expressive domains remains too costly for many real-world programs. To address this challenge, we introduce a new data-driven method, called LAIT, that produces a faster and more scalable numerical analysis without significant loss of precision. Our approach is based on the key insight that sequences of abstract elements produced by the analyzer contain redundancy which can be exploited to increase performance without compromising precision significantly. Concretely, we present an iterative learning algorithm that learns a neural policy that identifies and removes redundant constraints at various points in the sequence. We believe that our method is generic and can be applied to various numerical domains. We instantiate LAIT for the widely used Polyhedra and Octagon domains. Our evaluation of LAIT on a range of real-world applications with both domains shows that while the approach is designed to be generic, it is orders of magnitude faster on the most costly benchmarks than a state-of-the-art numerical library while maintaining close-to-original analysis precision. Further, LAIT outperforms hand-crafted heuristics and a domain-specific learning approach in terms of both precision and speed.},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {1112--1127},
numpages = {16},
keywords = {Machine learning, Performance optimization, Abstract interpretation, Numerical domains},
location = {London, UK},
series = {PLDI 2020}
}




@article{DBLP:journals/csur/KanvarK16,
  author    = {Vini Kanvar and
               Uday P. Khedker},
  title     = {Heap Abstractions for Static Analysis},
  journal   = {{ACM} Comput. Surv.},
  volume    = {49},
  number    = {2},
  pages     = {29:1--29:47},
  year      = {2016},
  url       = {https://doi.org/10.1145/2931098},
  doi       = {10.1145/2931098},
  timestamp = {Tue, 06 Nov 2018 12:50:50 +0100},
  biburl    = {https://dblp.org/rec/journals/csur/KanvarK16.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}








